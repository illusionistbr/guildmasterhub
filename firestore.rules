
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific permission for a guild
    function hasGuildPermission(guildId, permissionKey) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      let userRoleName = guildData.roles[request.auth.uid].roleName;
      let rolePermissions = guildData.customRoles[userRoleName].permissions;
      // Check if the permissionKey exists and is true in the rolePermissions map
      return permissionKey in rolePermissions && rolePermissions[permissionKey] == true;
    }

    // Helper function to check if the user is an admin (Lider) of the guild
    function isAdmin(guildId) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      let userRoleName = guildData.roles[request.auth.uid].roleName;
      return userRoleName == 'Lider';
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // No delete rule for users from client, manage through Firebase console or admin SDK
    }

    // Guilds collection
    match /guilds/{guildId} {
      allow read: if request.auth != null; // Anyone authenticated can read basic guild info for listings
      allow create: if request.auth != null; // Any authenticated user can create a guild
      allow update: if request.auth != null && (
                      (hasGuildPermission(guildId, 'MANAGE_GUILD_SETTINGS_GENERAL')) ||
                      (hasGuildPermission(guildId, 'MANAGE_GUILD_SETTINGS_APPEARANCE')) ||
                      (hasGuildPermission(guildId, 'MANAGE_ROLES_PERMISSIONS')) ||
                      (hasGuildPermission(guildId, 'MANAGE_DKP_SETTINGS')) ||
                      (hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS'))
                    );
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Subcollections of Guilds
      match /auditLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, 'VIEW_AUDIT_LOG');
        allow create: if request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.roles[request.auth.uid] != null; // Any guild member (or admin via helper) can trigger actions that create logs
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId; // Only owner can delete (for guild cleanup)
      }

      match /applications/{applicationId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_RECRUITMENT_VIEW_APPLICATIONS');
        allow create: if request.auth != null; // Anyone can apply
        allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_RECRUITMENT_PROCESS_APPLICATIONS'); // For approve/reject
        // No direct delete from client for applications, they are archived by status change
      }

      match /events/{eventId} {
        allow read: if request.auth != null; // Any authenticated user can read events (e.g., for public calendar view)
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_EVENTS_CREATE');
        allow update: if request.auth != null && (hasGuildPermission(guildId, 'MANAGE_EVENTS_EDIT') || request.auth.uid == resource.data.organizerId);
        allow delete: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_EVENTS_DELETE');

        // Subcollection for manual event confirmations
        match /manualConfirmations/{userId} {
          allow read: if request.auth != null && (request.auth.uid == userId || hasGuildPermission(guildId, 'MANAGE_MANUAL_CONFIRMATIONS_APPROVE'));
          allow create: if request.auth != null && request.auth.uid == userId; // User can create their own confirmation
          allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_MANUAL_CONFIRMATIONS_APPROVE'); // Admin can approve/reject
          // No direct delete from client for these
        }
      }

      match /groups/{groupId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.memberIds[request.auth.uid] != null; // Members can view groups
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_GROUPS_CREATE');
        allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_GROUPS_EDIT');
        allow delete: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_GROUPS_DELETE');
      }
      
      match /notifications/{notificationId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.memberIds[request.auth.uid] != null; // Members can read notifications for their guild
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_EVENTS_CREATE'); // Example: Only those who can create events can create certain notifications
        // Update/delete might be admin-only or system-driven
      }

      match /dkpDecayLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS'); // Admins can read DKP decay logs
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS'); // Admins can trigger on-demand decay which creates a log
        // Deletion typically managed by system or higher-level admin
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId; // Owner for cleanup
      }
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a member of a specific guild (either in memberIds or is owner)
    function isGuildMember(guildId, userId) {
      let guildPath = /databases/$(database)/documents/guilds/$(guildId);
      return exists(guildPath) &&
             (get(guildPath).data.memberIds.hasAny([userId]) ||
              get(guildPath).data.ownerId == userId);
    }

    // Helper function to check if a user has a specific permission in a guild
    function hasGuildPermission(guildId, userId, permission) {
      let guildPath = /databases/$(database)/documents/guilds/$(guildId);
      // Ensure guild exists, user is a member, role info exists, custom roles structure exists, and permission is granted
      return exists(guildPath) &&
             (get(guildPath).data.memberIds.hasAny([userId]) || get(guildPath).data.ownerId == userId) && // Is member or owner
             (userId in get(guildPath).data.roles) && // User has an entry in guild.roles
             (get(guildPath).data.roles[userId].roleName != null) && // User's roleName is not null
             (get(guildPath).data.customRoles != null) && // customRoles map exists
             (get(guildPath).data.roles[userId].roleName in get(guildPath).data.customRoles) && // User's roleName is a key in customRoles
             (get(guildPath).data.customRoles[get(guildPath).data.roles[userId].roleName].permissions != null) && // Permissions list for that role is not null
             (get(guildPath).data.customRoles[get(guildPath).data.roles[userId].roleName].permissions.hasAny([permission])); // The role has the required permission
    }

    // Helper function to check if the user is the owner of the guild
    function isGuildOwner(guildId, userId) {
      let guildPath = /databases/$(database)/documents/guilds/$(guildId);
      return exists(guildPath) && get(guildPath).data.ownerId == userId;
    }

    // User profiles:
    // Users can read their own profile.
    // Users can create their own profile upon signup.
    // Users can update their own profile (displayName, photoURL); other fields like 'guilds' or 'lastNotificationsCheckedTimestamp' are managed by specific actions.
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.containsKey('createdAt') &&
                       request.resource.data.createdAt == request.time;
      allow update: if isAuthenticated() && request.auth.uid == userId &&
                       // Allow updating only specific, non-critical fields by the user directly
                       request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'email', 'uid', 'createdAt', 'guilds', 'lastNotificationsCheckedTimestamp']) &&
                       // Prevent user from modifying their own guilds list or last checked timestamps directly here (should be side-effects of other actions)
                       request.resource.data.guilds == resource.data.guilds &&
                       request.resource.data.lastNotificationsCheckedTimestamp == resource.data.lastNotificationsCheckedTimestamp;
                       // Allow updating lastNotificationsCheckedTimestamp if it's the only thing changing (or with other allowed fields)
      allow update (path /users/$(userId)/lastNotificationsCheckedTimestamp) : if isAuthenticated() && request.auth.uid == userId;
    }

    // Guilds:
    // Any authenticated user can read guild lists (e.g., for /guilds page).
    // Authenticated users can create guilds if they are the owner set in the new guild data.
    // Updates are complex and depend on permissions or ownership.
    // Deletion is restricted to the guild owner.
    match /guilds/{guildId} {
      allow read: if isAuthenticated(); // Allows listing/reading basic guild info

      allow create: if isAuthenticated() &&
                       request.resource.data.name.size() >= 3 &&
                       request.resource.data.name.size() <= 50 &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.memberIds.hasAll([request.auth.uid]) &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.roles[request.auth.uid].roleName == "Lider" &&
                       request.resource.data.customRoles.Lider.permissions.hasAll([
                         "MANAGE_MEMBERS_VIEW", "MANAGE_MEMBERS_EDIT_ROLE", "MANAGE_MEMBERS_EDIT_STATUS",
                         "MANAGE_MEMBERS_EDIT_NOTES", "MANAGE_MEMBERS_KICK", "MANAGE_EVENTS_CREATE",
                         "MANAGE_EVENTS_EDIT", "MANAGE_EVENTS_DELETE", "MANAGE_EVENTS_VIEW_PIN",
                         "MANAGE_GUILD_SETTINGS_GENERAL", "MANAGE_GUILD_SETTINGS_APPEARANCE",
                         "MANAGE_ROLES_PERMISSIONS", "MANAGE_GROUPS_CREATE", "MANAGE_GROUPS_EDIT",
                         "MANAGE_GROUPS_DELETE", "VIEW_AUDIT_LOG", "MANAGE_RECRUITMENT_VIEW_APPLICATIONS",
                         "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS", "VIEW_MEMBER_DETAILED_INFO"
                       ]) &&
                       request.resource.data.customRoles.Membro.permissions.hasAll(["MANAGE_MEMBERS_VIEW", "VIEW_MEMBER_DETAILED_INFO"]);

      allow update: if isAuthenticated() && isGuildMember(guildId, request.auth.uid) &&
                       (
                         // Owner can update general settings, appearance, DKP settings, and custom roles (permissions).
                         (isGuildOwner(guildId, request.auth.uid) &&
                           (
                             request.resource.data.diff(resource.data).affectedKeys().hasAny([
                               'name', 'description', 'password', 'isOpen', 'socialLinks', 'bannerUrl', 'logoUrl',
                               'game', 'region', 'server', 'tags',
                               'dkpSystemEnabled', 'dkpRedemptionWindow', 'dkpDefaultsPerCategory',
                               'dkpDecayEnabled', 'dkpDecayPercentage', 'dkpDecayIntervalDays', 'dkpDecayInitialDate',
                               'lastDkpDecayTimestamp', 'recruitmentQuestions' // Added recruitmentQuestions
                             ]) ||
                             (request.resource.data.customRoles != resource.data.customRoles) // Implicitly has MANAGE_ROLES_PERMISSIONS
                           )
                         ) ||
                         // Users with MANAGE_GUILD_SETTINGS_GENERAL can update specific general fields
                         (hasGuildPermission(guildId, request.auth.uid, "MANAGE_GUILD_SETTINGS_GENERAL") &&
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'description', 'password', 'isOpen', 'socialLinks', 'game', 'region', 'server', 'tags', 'recruitmentQuestions'])
                         ) ||
                         // Users with MANAGE_GUILD_SETTINGS_APPEARANCE can update appearance
                         (hasGuildPermission(guildId, request.auth.uid, "MANAGE_GUILD_SETTINGS_APPEARANCE") &&
                           request.resource.data.diff(resource.data).affectedKeys().hasAny(['bannerUrl', 'logoUrl'])
                         ) ||
                         // Users with MANAGE_ROLES_PERMISSIONS can update customRoles
                         (hasGuildPermission(guildId, request.auth.uid, "MANAGE_ROLES_PERMISSIONS") &&
                           request.resource.data.customRoles != resource.data.customRoles
                         ) ||
                         // Updating roles map (e.g. adding member, changing role, DKP, notes, status)
                         (request.resource.data.roles != resource.data.roles &&
                           (
                             // Admin actions on other members' roles
                             ( ( hasGuildPermission(guildId, request.auth.uid, "MANAGE_MEMBERS_EDIT_ROLE") ||
                                 hasGuildPermission(guildId, request.auth.uid, "MANAGE_MEMBERS_EDIT_STATUS") ||
                                 hasGuildPermission(guildId, request.auth.uid, "MANAGE_MEMBERS_EDIT_NOTES") ||
                                 hasGuildPermission(guildId, request.auth.uid, "MANAGE_MEMBERS_KICK")
                               ) &&
                               // Ensure admin is not accidentally changing their own dkpBalance or roleName via this path
                               // (Owner/Lider changes should go through specific logic or be owner-only updates above)
                               !(request.auth.uid in request.resource.data.roles.diff(resource.data.roles).affectedKeys())
                             ) ||
                             // User updating their own character info (nickname, gearscore etc.)
                             // This rule allows a user to update their own entry in the roles map.
                             ( request.auth.uid in request.resource.data.roles.diff(resource.data.roles).affectedKeys() && // Only own role entry is changing
                               request.resource.data.roles[request.auth.uid].keys().hasOnly([
                                 'roleName', 'characterNickname', 'gearScore', 'gearScoreScreenshotUrl', 'gearBuildLink', 'skillBuildLink',
                                 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon', 'notes', 'status', 'dkpBalance'
                               ]) &&
                               request.resource.data.roles[request.auth.uid].roleName == resource.data.roles[request.auth.uid].roleName && // Role name cannot be changed by self
                               request.resource.data.roles[request.auth.uid].dkpBalance == resource.data.roles[request.auth.uid].dkpBalance // DKP cannot be changed by self
                             )
                           )
                         ) ||
                         // Updating memberIds and memberCount (e.g. when member joins/leaves/kicked)
                         ( (request.resource.data.memberIds != resource.data.memberIds || request.resource.data.memberCount != resource.data.memberCount) &&
                           (
                             hasGuildPermission(guildId, request.auth.uid, "MANAGE_MEMBERS_KICK") || // Kicking
                             ( // Joining self to a public guild (or being accepted from application)
                               request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                               request.resource.data.memberIds.hasAll([request.auth.uid]) && // current user is the one being added
                               (guildId in request.resource.data.roles || request.auth.uid in request.resource.data.roles) // role info is being added for them
                             ) ||
                             ( // Leaving guild (memberIds decreases by 1, user's role entry removed)
                               request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1 &&
                               !request.resource.data.memberIds.hasAll([request.auth.uid]) && // current user is the one being removed
                               !(request.auth.uid in request.resource.data.roles) // role info is being removed
                             )
                           )
                         )
                       );

      allow delete: if isAuthenticated() && isGuildOwner(guildId, request.auth.uid);

      // Subcollections
      match /auditLogs/{logId} {
        allow read: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "VIEW_AUDIT_LOG");
        allow create: if isAuthenticated() && isGuildMember(guildId, request.auth.uid) &&
                         request.resource.data.actorId == request.auth.uid && // Logged action must be by the authenticated user
                         request.resource.data.timestamp == request.time;
      }

      match /applications/{applicationId} {
        allow read: if isAuthenticated() &&
                       (hasGuildPermission(guildId, request.auth.uid, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS") ||
                        request.auth.uid == resource.data.applicantId); // Applicant can read their own
        allow create: if isAuthenticated() && request.resource.data.applicantId == request.auth.uid; // Anyone auth'd can apply
        allow update: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS") &&
                         // Can only update status, reviewedBy, reviewedAt
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reviewedBy', 'reviewedAt']) &&
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt == request.time;
      }

      match /events/{eventId} {
        allow read: if isAuthenticated() && isGuildMember(guildId, request.auth.uid);
        allow create: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_EVENTS_CREATE") &&
                         request.resource.data.organizerId == request.auth.uid &&
                         request.resource.data.guildId == guildId;
        allow update: if isAuthenticated() &&
                         ( (hasGuildPermission(guildId, request.auth.uid, "MANAGE_EVENTS_EDIT") && request.resource.data.organizerId == resource.data.organizerId ) || // Original organizer with edit perm
                           (isGuildOwner(guildId, request.auth.uid)) || // Guild owner can always edit
                           // Member self-updating attendeesWithPin (claiming DKP)
                           (isGuildMember(guildId, request.auth.uid) &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeesWithPin']) &&
                            request.resource.data.attendeesWithPin.hasAll(resource.data.attendeesWithPin) && // Can only add to array
                            request.resource.data.attendeesWithPin.hasAll([request.auth.uid]) // Must be adding self
                           )
                         ) && request.resource.data.guildId == guildId;
        allow delete: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_EVENTS_DELETE");
      }

      match /groups/{groupId} {
        allow read: if isAuthenticated() && isGuildMember(guildId, request.auth.uid);
        allow create: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_GROUPS_CREATE") &&
                         request.resource.data.createdBy == request.auth.uid &&
                         request.resource.data.guildId == guildId;
        allow update: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_GROUPS_EDIT") &&
                         request.resource.data.guildId == guildId;
        allow delete: if isAuthenticated() && hasGuildPermission(guildId, request.auth.uid, "MANAGE_GROUPS_DELETE");
      }

      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && isGuildMember(guildId, request.auth.uid);
        // Create typically server-side or via highly restricted functions
        allow create: if isAuthenticated() && (isGuildOwner(guildId, request.auth.uid) || hasGuildPermission(guildId, request.auth.uid, "MANAGE_EVENTS_CREATE")); // Example restriction
      }
      
      match /dkpDecayLogs/{logId} {
        allow read: if isAuthenticated() && isGuildOwner(guildId, request.auth.uid);
        allow create: if isAuthenticated() && isGuildOwner(guildId, request.auth.uid) &&
                         request.resource.data.triggeredByUserId == request.auth.uid; // Only owner for on-demand for now
      }
    }
  }
}

    
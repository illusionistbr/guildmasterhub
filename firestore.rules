
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of the guild
    function isGuildMember(guildId) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      return request.auth != null &&
             guildData.memberIds != null &&
             guildData.memberIds.hasAny([request.auth.uid]);
    }
    
    // Helper function to check if a user has a specific permission for a guild
    function hasGuildPermission(guildId, permissionName) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      // Ensure customRoles, user's roleName, and its permissions list exist before trying to access
      return request.auth != null &&
             guildData.roles != null &&
             guildData.roles[request.auth.uid] != null &&
             guildData.roles[request.auth.uid].roleName != null &&
             guildData.customRoles != null &&
             guildData.customRoles[guildData.roles[request.auth.uid].roleName] != null &&
             guildData.customRoles[guildData.roles[request.auth.uid].roleName].permissions != null &&
             permissionName in guildData.customRoles[guildData.roles[request.auth.uid].roleName].permissions;
    }

    // Simplified check for owner or a user with a broad admin-like permission.
    function isGuildAdminEquivalent(guildId) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      return request.auth != null &&
             (request.auth.uid == guildData.ownerId ||
              hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS")); // Example of a high-level permission
    }

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    match /guilds/{guildId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        (
          (
            (request.resource.data.name != resource.data.name ||
            request.resource.data.description != resource.data.description ||
            request.resource.data.game != resource.data.game ||
            request.resource.data.region != resource.data.region ||
            request.resource.data.server != resource.data.server ||
            request.resource.data.tags != resource.data.tags || 
            request.resource.data.password != resource.data.password ||
            request.resource.data.isOpen != resource.data.isOpen ||
            request.resource.data.socialLinks != resource.data.socialLinks
            ) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'game', 'region', 'server', 'tags', 'password', 'isOpen', 'socialLinks'])
          ) && hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_GENERAL")
        ) ||
        (
            request.resource.data.recruitmentQuestions != resource.data.recruitmentQuestions &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['recruitmentQuestions']) &&
            hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS")
        ) ||
        (
          (request.resource.data.bannerUrl != resource.data.bannerUrl ||
           request.resource.data.logoUrl != resource.data.logoUrl
          ) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bannerUrl', 'logoUrl']) &&
          hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_APPEARANCE")
        ) ||
        (
          (request.resource.data.dkpSystemEnabled != resource.data.dkpSystemEnabled ||
           request.resource.data.dkpRedemptionWindow != resource.data.dkpRedemptionWindow ||
           request.resource.data.dkpDefaultsPerCategory != resource.data.dkpDefaultsPerCategory
          ) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpSystemEnabled', 'dkpRedemptionWindow', 'dkpDefaultsPerCategory']) &&
          hasGuildPermission(guildId, "MANAGE_DKP_SETTINGS")
        ) ||
        (
          (request.resource.data.dkpDecayEnabled != resource.data.dkpDecayEnabled ||
           request.resource.data.dkpDecayPercentage != resource.data.dkpDecayPercentage ||
           request.resource.data.dkpDecayIntervalDays != resource.data.dkpDecayIntervalDays ||
           request.resource.data.dkpDecayInitialDate != resource.data.dkpDecayInitialDate ||
           request.resource.data.lastDkpDecayTimestamp != resource.data.lastDkpDecayTimestamp
          ) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpDecayEnabled', 'dkpDecayPercentage', 'dkpDecayIntervalDays', 'dkpDecayInitialDate', 'lastDkpDecayTimestamp']) &&
          hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS")
        ) ||
        (
          request.resource.data.customRoles != resource.data.customRoles &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customRoles']) &&
          hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS")
        ) ||
        (
          request.resource.data.memberCount == resource.data.memberCount + 1 &&
          request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
          request.resource.data.roles.keys().size() == resource.data.roles.keys().size() + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount', 'memberIds', 'roles']) &&
          hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS")
        ) ||
        (
          request.resource.data.memberCount == resource.data.memberCount - 1 &&
          request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1 &&
          request.resource.data.roles.keys().size() == resource.data.roles.keys().size() - 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount', 'memberIds', 'roles']) &&
          hasGuildPermission(guildId, "MANAGE_MEMBERS_KICK")
        ) ||
        (
          request.resource.data.roles[request.auth.uid] != null && resource.data.roles[request.auth.uid] != null &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) &&
          request.resource.data.roles.diff(resource.data.roles).affectedKeys().hasOnly([request.auth.uid]) &&
          request.resource.data.roles[request.auth.uid].diff(resource.data.roles[request.auth.uid]).affectedKeys().hasOnly([
            'characterNickname', 'gearScore', 'gearScoreScreenshotUrl', 'gearBuildLink', 'skillBuildLink', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon'
          ])
        ) ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) &&
          request.resource.data.roles.keys().size() == resource.data.roles.keys().size() &&
          (
            (hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_ROLE") &&
             request.resource.data.roles.diff(resource.data.roles).affectedKeys().hasAny(resource.data.roles.keys().removeAll([request.auth.uid]))
            ) ||
            (hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_STATUS") &&
             request.resource.data.roles.diff(resource.data.roles).affectedKeys().hasAny(resource.data.roles.keys().removeAll([request.auth.uid]))
            ) ||
            (hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_NOTES") &&
             request.resource.data.roles.diff(resource.data.roles).affectedKeys().hasAny(resource.data.roles.keys().removeAll([request.auth.uid]))
            )
          )
        )
      );

      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // --- Subcollections ---
      match /auditLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, "VIEW_AUDIT_LOG");
        allow create: if request.auth != null && isGuildAdminEquivalent(guildId);
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /applications/{applicationId} {
        allow read: if request.auth != null && (hasGuildPermission(guildId, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS") || request.auth.uid == resource.data.applicantId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.applicantId;
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS");
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /events/{eventId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_EVENTS_CREATE");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_EVENTS_EDIT");
        allow delete: if request.auth != null && (hasGuildPermission(guildId, "MANAGE_EVENTS_DELETE") || request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId);

        match /manualConfirmations/{userId} {
          allow read: if request.auth != null && (request.auth.uid == userId || hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE"));
          allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == userId;
          allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE");
          allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
        }
      }

      match /groups/{groupId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_GROUPS_CREATE");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_GROUPS_EDIT");
        allow delete: if request.auth != null && (hasGuildPermission(guildId, "MANAGE_GROUPS_DELETE") || request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId);
      }

      match /notifications/{notificationId} {
        allow read: if request.auth != null;
        allow create, update: if request.auth != null && isGuildAdminEquivalent(guildId);
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /dkpDecayLogs/{logId} {
         allow read: if request.auth != null && hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS");
         allow create: if request.auth != null && isGuildAdminEquivalent(guildId);
         allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /bankItems/{itemId} {
        allow read: if request.auth != null; 
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_BANK_ADD");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_BANK_MANAGE");
        allow delete: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_BANK_MANAGE");
      }

      match /auctions/{auctionId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_CREATE");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_EDIT");
        allow delete: if request.auth != null && hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_DELETE");
      }
    }
  }
}

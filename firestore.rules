rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      // This UID should be replaced with the actual UID of the site administrator.
      return request.auth != null && request.auth.uid == 'Y3W5w0EcrMQOtep8OzqxJnrbrdj2';
    }

    function isGuildMember(guildId) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      return request.auth != null && (request.auth.uid == guildData.ownerId || request.auth.uid in guildData.memberIds);
    }

    function hasGuildPermission(guildId, permissionName) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      // Ensure customRoles, user's roleName, and its permissions list exist before trying to access
      return request.auth != null &&
             guildData.roles != null &&
             guildData.roles[request.auth.uid] != null &&
             guildData.roles[request.auth.uid].roleName != null &&
             guildData.customRoles != null &&
             guildData.customRoles[guildData.roles[request.auth.uid].roleName] != null &&
             guildData.customRoles[guildData.roles[request.auth.uid].roleName].permissions != null &&
             permissionName in guildData.customRoles[guildData.roles[request.auth.uid].roleName].permissions;
    }

    function isGuildAdminEquivalent(guildId) {
      let guildData = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      return request.auth != null &&
             (request.auth.uid == guildData.ownerId ||
              hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS"));
    }

    // Rules for users collection
    match /users/{userId} {
      // An admin can read any user's profile.
      // A user can read their own profile.
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Only an admin can list all users.
      allow list: if request.auth != null && isAdmin();
      
      // A user can create or update their own profile.
      allow update, create: if request.auth != null && request.auth.uid == userId;
    }

    match /guilds/{guildId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      allow update: if request.auth != null && (
        // Condition 1: Guild Owner can do anything
        request.auth.uid == resource.data.ownerId ||

        // Condition 2: General Settings
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'game', 'region', 'server', 'tags', 'password', 'isOpen', 'socialLinks', 'tlGuildFocus']) &&
          hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_GENERAL")
        ) ||

        // Condition 3: Appearance Settings
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bannerUrl', 'logoUrl']) &&
          hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_APPEARANCE")
        ) ||

        // Condition 4: DKP Settings
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpSystemEnabled', 'dkpRedemptionWindow', 'dkpDefaultsPerCategory']) &&
          hasGuildPermission(guildId, "MANAGE_DKP_SETTINGS")
        ) ||

        // Condition 5: DKP Decay Settings
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpDecayEnabled', 'dkpDecayPercentage', 'dkpDecayIntervalDays', 'dkpDecayInitialDate', 'lastDkpDecayTimestamp']) &&
          hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS")
        ) ||
        
        // Condition 6: Sub-Guild Settings
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subGuildsEnabled', 'subGuilds']) &&
          hasGuildPermission(guildId, "MANAGE_SUB_GUILDS")
        ) ||

        // Condition 7: Custom Roles / Permissions
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customRoles']) &&
          hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS")
        ) ||

        // Condition 8: Adding a member (application accept)
        (
          request.resource.data.memberCount == resource.data.memberCount + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount', 'memberIds', 'roles']) &&
          hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS")
        ) ||

        // Condition 9: Kicking a member
        (
          request.resource.data.memberCount == resource.data.memberCount - 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount', 'memberIds', 'roles']) &&
          hasGuildPermission(guildId, "MANAGE_MEMBERS_KICK")
        ) ||

        // Condition 10: User updating their OWN profile within roles map
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) &&
          request.resource.data.roles.diff(resource.data.roles).affectedKeys().hasOnly([request.auth.uid]) &&
          request.resource.data.roles[request.auth.uid].diff(resource.data.roles[request.auth.uid]).affectedKeys().hasOnly([
            'characterNickname', 'gearScore', 'gearScoreScreenshotUrl', 'gearBuildLink', 'skillBuildLink', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon',
            'gearScreenshotUpdatedAt', 'gearScreenshotUpdateRequest'
          ])
        ) ||
        
        // Condition 11: Admin updating OTHER member's profile (role, status, notes, dkp, subguild)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) &&
          (
            hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_ROLE") ||
            hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_STATUS") ||
            hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_NOTES") ||
            hasGuildPermission(guildId, "MANAGE_MEMBER_DKP_BALANCE") ||
            hasGuildPermission(guildId, "MANAGE_MEMBERS_ASSIGN_SUB_GUILD")
          )
        ) ||

        // Condition 12: Updating auction count when creating an auction
        (
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['auctionCount']) &&
            hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_CREATE")
        )
      );

      // --- Subcollections ---

      match /auditLogs/{logId} {
        allow read: if hasGuildPermission(guildId, "VIEW_AUDIT_LOG");
        allow create: if isGuildMember(guildId);
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /applications/{applicationId} {
        allow read: if hasGuildPermission(guildId, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS") || request.auth.uid == resource.data.applicantId;
        allow create: if request.auth.uid == request.resource.data.applicantId;
        allow update: if hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS");
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /events/{eventId} {
        allow read: if isGuildMember(guildId);
        allow create: if hasGuildPermission(guildId, "MANAGE_EVENTS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_EVENTS_EDIT") || isGuildMember(guildId); // Member can update for RSVP/PIN
        allow delete: if hasGuildPermission(guildId, "MANAGE_EVENTS_DELETE");

        match /manualConfirmations/{userId} {
          allow read: if request.auth.uid == userId || hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE");
          allow create: if request.auth.uid == userId && request.resource.data.userId == userId;
          allow update: if hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE");
          allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
        }
      }

      match /groups/{groupId} {
        allow read: if isGuildMember(guildId);
        allow create: if hasGuildPermission(guildId, "MANAGE_GROUPS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_GROUPS_EDIT");
        allow delete: if hasGuildPermission(guildId, "MANAGE_GROUPS_DELETE");
      }

      match /notifications/{notificationId} {
        allow read: if isGuildMember(guildId);
        allow create: if isGuildMember(guildId);
        allow update: if isGuildAdminEquivalent(guildId);
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /dkpDecayLogs/{logId} {
         allow read: if hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS");
         allow create: if isGuildAdminEquivalent(guildId);
         allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }
      
      match /bankItems/{itemId} {
        allow read: if isGuildMember(guildId);
        allow create: if hasGuildPermission(guildId, "MANAGE_LOOT_BANK_ADD");
        allow update: if hasGuildPermission(guildId, "MANAGE_LOOT_BANK_MANAGE");
        allow delete: if hasGuildPermission(guildId, "MANAGE_LOOT_BANK_MANAGE");
      }

      match /auctions/{auctionId} {
        allow read: if isGuildMember(guildId);
        allow create: if hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_EDIT") || isGuildMember(guildId);
        allow delete: if hasGuildPermission(guildId, "MANAGE_LOOT_AUCTIONS_DELETE");
      }

      match /rolls/{rollId} {
        allow read: if isGuildMember(guildId);
        allow create: if hasGuildPermission(guildId, "MANAGE_LOOT_ROLLS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_LOOT_ROLLS_MANAGE") || isGuildMember(guildId);
        allow delete: if hasGuildPermission(guildId, "MANAGE_LOOT_SETTINGS");
      }
      
      match /vods/{vodId} {
        allow read: if isGuildMember(guildId);
        allow create: if request.auth.uid == request.resource.data.submittedByUserId;
        allow update: if hasGuildPermission(guildId, "MANAGE_VOD_REVIEWS");
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }
    }
  }
}

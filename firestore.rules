
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is from an authenticated user
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Helper function to check if the authenticated user is the owner of a specific guild
    function isGuildOwner(guildId) {
      return isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
    }

    // Helper function to get the role name of the authenticated user for a specific guild
    function getUserRoleName(guildId) {
      let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
      // Ensure guildDoc.data and roles map exist and are not null
      if (isAuthenticated() &&
          'data' in guildDoc && guildDoc.data != null &&
          'roles' in guildDoc.data && guildDoc.data.roles != null &&
          request.auth.uid in guildDoc.data.roles && guildDoc.data.roles[request.auth.uid] != null &&
          'roleName' in guildDoc.data.roles[request.auth.uid] && guildDoc.data.roles[request.auth.uid].roleName != null) {
        return guildDoc.data.roles[request.auth.uid].roleName;
      }
      return null; // Return null if any part of the path is missing or user is not in roles map
    }

    // Helper function to check if a user has a specific permission for a guild
    function hasGuildPermission(guildId, permissionName) {
      let userRoleName = getUserRoleName(guildId);
      let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));

      // Ensure all nested properties exist before trying to access them
      return isAuthenticated() &&
             userRoleName != null &&
             'data' in guildDoc && guildDoc.data != null &&
             'customRoles' in guildDoc.data && guildDoc.data.customRoles != null &&
             userRoleName in guildDoc.data.customRoles && guildDoc.data.customRoles[userRoleName] != null &&
             'permissions' in guildDoc.data.customRoles[userRoleName] &&
             guildDoc.data.customRoles[userRoleName].permissions != null &&
             // Check if permissionName exists in the permissions array
             permissionName in guildDoc.data.customRoles[userRoleName].permissions;
    }

    // User profiles: Users can read and manage their own profile.
    match /users/{userId} {
      allow read, create, update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Guild documents
    match /guilds/{guildId} {
      allow read: if isAuthenticated(); // Any authenticated user can read guild listings/details

      // Only authenticated users who are also the ownerId in the request data can create guilds
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;

      // Guild updates: complex, depends on the field being changed and user's permissions
      allow update: if isAuthenticated() && (
                      // Guild owner can update anything
                      isGuildOwner(guildId) ||
                      // Users with MANAGE_GUILD_SETTINGS_GENERAL can update general guild info
                      (hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_GENERAL") &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'game', 'region', 'server', 'tags', 'password', 'isOpen', 'socialLinks']))
                      ) ||
                      // Users with MANAGE_GUILD_SETTINGS_APPEARANCE can update appearance
                      (hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_APPEARANCE") &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bannerUrl', 'logoUrl']))
                      ) ||
                      // Users with MANAGE_DKP_SETTINGS can update DKP settings
                      (hasGuildPermission(guildId, "MANAGE_DKP_SETTINGS") &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpSystemEnabled', 'dkpRedemptionWindow', 'dkpDefaultsPerCategory']))
                      ) ||
                      // Users with MANAGE_DKP_DECAY_SETTINGS can update DKP decay settings
                      (hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS") &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['dkpDecayEnabled', 'dkpDecayPercentage', 'dkpDecayIntervalDays', 'dkpDecayInitialDate', 'lastDkpDecayTimestamp']))
                      ) ||
                      // Users with MANAGE_ROLES_PERMISSIONS can update customRoles
                      (hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS") &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['customRoles']))
                      ) ||
                      // Users with MANAGE_RECRUITMENT_PROCESS_APPLICATIONS can update memberIds, memberCount, and roles (for accepting new members)
                      (hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS") &&
                        (
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['memberIds', 'memberCount', 'roles']) &&
                          (request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1) && // Adding one member
                          (request.resource.data.memberCount == resource.data.memberCount + 1)
                        )
                      ) ||
                      // Users with permissions to edit roles, status, or notes can update the 'roles' map for existing members
                      ( (hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_ROLE") || hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_STATUS") || hasGuildPermission(guildId, "MANAGE_MEMBERS_EDIT_NOTES")) &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles'])) &&
                        // Ensure no new members are added via this path and member count isn't changed directly
                        (request.resource.data.memberIds.size() == resource.data.memberIds.size()) &&
                        (request.resource.data.memberCount == resource.data.memberCount)
                      ) ||
                      // Users with MANAGE_MEMBERS_KICK can update memberIds, memberCount, and roles (for kicking members)
                      (hasGuildPermission(guildId, "MANAGE_MEMBERS_KICK") &&
                        (
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['memberIds', 'memberCount', 'roles']) &&
                          (request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1) && // Removing one member
                          (request.resource.data.memberCount == resource.data.memberCount - 1)
                        )
                      )
                    );

      // Only the guild owner can delete the main guild document.
      allow delete: if isGuildOwner(guildId);

      // --- Subcollections ---

      match /auditLogs/{logId} {
        allow read: if hasGuildPermission(guildId, "VIEW_AUDIT_LOG");
        allow create: if isGuildOwner(guildId) || hasGuildPermission(guildId, "VIEW_AUDIT_LOG"); // System/admin creates
        allow delete: if isGuildOwner(guildId); // Owner can delete for cleanup
      }

      match /applications/{applicationId} {
        allow read: if hasGuildPermission(guildId, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS") || (isAuthenticated() && request.auth.uid == resource.data.applicantId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.applicantId; // Applicant creates
        allow update: if hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS"); // Admin updates status
        allow delete: if isGuildOwner(guildId); // Owner can delete
      }

      match /events/{eventId} {
        allow read: if isAuthenticated(); // Any authenticated member can read events
        allow create: if hasGuildPermission(guildId, "MANAGE_EVENTS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_EVENTS_EDIT");
        allow delete: if hasGuildPermission(guildId, "MANAGE_EVENTS_DELETE") || isGuildOwner(guildId);

        match /manualConfirmations/{userId} {
          allow read: if (isAuthenticated() && request.auth.uid == userId) || hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE");
          allow create: if isAuthenticated() && request.auth.uid == userId && request.resource.data.userId == userId; // User creates their own
          allow update: if hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE"); // Admin approves/rejects
          allow delete: if isGuildOwner(guildId);
        }
      }

      match /groups/{groupId} {
        allow read: if isAuthenticated();
        allow create: if hasGuildPermission(guildId, "MANAGE_GROUPS_CREATE");
        allow update: if hasGuildPermission(guildId, "MANAGE_GROUPS_EDIT");
        allow delete: if hasGuildPermission(guildId, "MANAGE_GROUPS_DELETE") || isGuildOwner(guildId);
      }

      match /notifications/{notificationId} {
        allow read: if isAuthenticated();
        // Create/update usually server-driven or by those with broad guild management perms.
        allow create, update: if isGuildOwner(guildId) || hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_GENERAL");
        allow delete: if isGuildOwner(guildId);
      }

      match /dkpDecayLogs/{logId} {
         allow read: if hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS");
         allow create: if isGuildOwner(guildId) || hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS");
         allow delete: if isGuildOwner(guildId);
      }
    }
  }
}

    
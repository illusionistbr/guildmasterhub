rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role based on a hardcoded UID.
    // In a real production environment, this might check a custom claim or a role in the database.
    function isAdmin() {
      return request.auth.uid == 'Y3W5w0EcrMQOtep8OzqxJnrbrdj2';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // An admin can read any user profile.
      // A logged-in user can read and write their own profile.
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Allow admins to list all users. This is required for the admin dashboard.
      allow list: if request.auth != null && isAdmin();
    }

    // Rules for the 'guilds' collection and its subcollections
    match /guilds/{guildId} {
      // Anyone authenticated can read basic guild info to browse guilds.
      // This is necessary for the /guilds page to function.
      allow read: if request.auth != null;

      // Only authenticated members of the guild can write to the guild document.
      // We rely on in-app permissions (checked in Cloud Functions or client-side logic)
      // for more granular control (e.g., only owner can change the name).
      allow write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/guilds/$(guildId)).data.memberIds;

      // Rules for all subcollections within a guild (e.g., events, applications, auditLogs)
      match /{subcollection}/{docId} {
        // Only members of the guild can read or write documents in subcollections.
        // This is a broad rule but provides a good baseline of security.
        // Specific client-side logic should prevent non-admins from writing where they shouldn't.
        allow read, write, create, delete: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/guilds/$(guildId)).data.memberIds;
      }
    }
  }
}

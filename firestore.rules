
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get guild data (reusable)
    function getGuildData(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId)).data;
    }

    // Helper function to check if a user has a specific permission for their role
    // Assumes permissions are stored as a map: e.g., { "MANAGE_MEMBERS_KICK": true }
    function hasGuildPermission(userId, permission, guildId) {
      return getGuildData(guildId).roles != null &&
             getGuildData(guildId).roles[userId] != null &&
             getGuildData(guildId).customRoles != null &&
             (getGuildData(guildId).roles[userId].roleName in getGuildData(guildId).customRoles) &&
             getGuildData(guildId).customRoles[getGuildData(guildId).roles[userId].roleName].permissions != null &&
             (permission in getGuildData(guildId).customRoles[getGuildData(guildId).roles[userId].roleName].permissions) &&
             // If permission exists in the map, its value should be true
             getGuildData(guildId).customRoles[getGuildData(guildId).roles[userId].roleName].permissions[permission];
    }

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId; // User creates their own profile
      allow update: if request.auth != null && request.auth.uid == userId; // User updates their own profile
      allow delete: if false; // Typically restricted, handle via Cloud Function or special admin role
    }

    // Guilds
    match /guilds/{guildId} {
      // Guild Document specific rules
      allow get: if request.auth != null && (
                   resource.data.ownerId == request.auth.uid ||
                   (resource.data.memberIds != null && request.auth.uid in resource.data.memberIds) ||
                   resource.data.isOpen == true // Allow reading open guilds
                 );
      allow list: if request.auth != null; // Allow listing for guild exploration page
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid; // User must be owner of new guild
      allow update: if request.auth != null && (
                      (resource.data.ownerId == request.auth.uid) || // Owner can update
                      hasGuildPermission(request.auth.uid, "MANAGE_GUILD_SETTINGS_GENERAL", guildId) ||
                      hasGuildPermission(request.auth.uid, "MANAGE_GUILD_SETTINGS_APPEARANCE", guildId) ||
                      hasGuildPermission(request.auth.uid, "MANAGE_ROLES_PERMISSIONS", guildId) ||
                      hasGuildPermission(request.auth.uid, "MANAGE_DKP_SETTINGS", guildId) ||
                      hasGuildPermission(request.auth.uid, "MANAGE_DKP_DECAY_SETTINGS", guildId)
                    );
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid; // Only owner can delete the guild document

      // Subcollections for Guilds

      match /auditLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(request.auth.uid, "VIEW_AUDIT_LOG", guildId);
        // Audit logs are created by trusted client/server logic when actions occur.
        // Allow create if user is authenticated and part of the guild or owner.
        allow create: if request.auth != null && (
                        getGuildData(guildId).ownerId == request.auth.uid ||
                        (getGuildData(guildId).memberIds != null && request.auth.uid in getGuildData(guildId).memberIds)
                      );
        // Deletion of audit logs is critical, only guild owner for full guild cleanup.
        allow update: if false; // Audit logs should be immutable
        allow delete: if request.auth != null && getGuildData(guildId).ownerId == request.auth.uid;
      }

      match /events/{eventId} {
        allow read: if request.auth != null && ( // Members can read events
                      getGuildData(guildId).memberIds != null &&
                      request.auth.uid in getGuildData(guildId).memberIds
                    );
        allow create: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_EVENTS_CREATE", guildId);
        allow update: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_EVENTS_EDIT", guildId);
        allow delete: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_EVENTS_DELETE", guildId);

        match /manualConfirmations/{userIdConfirmation} { // Use a different variable name from outer scope {userId}
            allow read: if request.auth != null && (
                            request.auth.uid == userIdConfirmation || // User can read their own submission
                            hasGuildPermission(request.auth.uid, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE", guildId) // Admin can read all
                        );
            // User can create their own submission if they are not already PIN confirmed and haven't submitted before
            allow create: if request.auth != null && request.auth.uid == userIdConfirmation &&
                             request.resource.data.userId == userIdConfirmation &&
                             request.resource.data.eventId == eventId &&
                             (get(/databases/$(database)/documents/guilds/$(guildId)/events/$(eventId)).data.attendeesWithPin == null || !(request.auth.uid in get(/databases/$(database)/documents/guilds/$(guildId)/events/$(eventId)).data.attendeesWithPin)) &&
                             !exists(/databases/$(database)/documents/guilds/$(guildId)/events/$(eventId)/manualConfirmations/$(userIdConfirmation));
            allow update: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE", guildId); // Admin can approve/reject
            allow delete: if false; // Manage via status, do not allow direct deletion
        }
      }

      match /applications/{applicationId} {
        allow read: if request.auth != null && (
                      hasGuildPermission(request.auth.uid, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS", guildId) ||
                      request.auth.uid == resource.data.applicantId // Applicant can read their own application
                    );
        allow create: if request.auth != null; // Anyone authenticated can submit an application
        allow update: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS", guildId); // For approve/reject
        allow delete: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS", guildId); // Admin can delete old/spam applications
      }

      match /groups/{groupId} {
        allow read: if request.auth != null && ( // Members can read groups
                        getGuildData(guildId).memberIds != null &&
                        request.auth.uid in getGuildData(guildId).memberIds
                      );
        allow create: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_GROUPS_CREATE", guildId);
        allow update: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_GROUPS_EDIT", guildId);
        allow delete: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_GROUPS_DELETE", guildId);
      }

      match /notifications/{notificationId} {
        allow read: if request.auth != null && ( // Allow members to read notifications
                      getGuildData(guildId).memberIds != null &&
                      request.auth.uid in getGuildData(guildId).memberIds
                    );
        // Notifications are typically system-generated or by privileged actions
        allow create: if request.auth != null && (
                        getGuildData(guildId).ownerId == request.auth.uid || // Owner can create
                        hasGuildPermission(request.auth.uid, "MANAGE_EVENTS_CREATE", guildId) // Example: Event creators can trigger notifications
                      );
        allow update, delete: if false; // Notifications are typically immutable by clients
      }

      match /dkpDecayLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_DKP_DECAY_SETTINGS", guildId);
        allow create: if request.auth != null && hasGuildPermission(request.auth.uid, "MANAGE_DKP_DECAY_SETTINGS", guildId);
        allow update, delete: if false; // Logs should be immutable
      }
    }
  }
}

    

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific permission for a guild
    function hasGuildPermission(guildId, permission) {
      // Ensure paths are accessed safely
      let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
      // Check if guildDoc and necessary nested properties exist before accessing them
      return guildDoc.data != null &&
             guildDoc.data.roles != null &&
             guildDoc.data.roles[request.auth.uid] != null &&
             guildDoc.data.roles[request.auth.uid].roleName != null &&
             guildDoc.data.customRoles != null &&
             guildDoc.data.customRoles[guildDoc.data.roles[request.auth.uid].roleName] != null &&
             guildDoc.data.customRoles[guildDoc.data.roles[request.auth.uid].roleName].permissions != null &&
             // For map-based permissions:
             guildDoc.data.customRoles[guildDoc.data.roles[request.auth.uid].roleName].permissions[permission] == true;
             // For array-based permissions (if you use arrays in Firestore):
             // permission in guildDoc.data.customRoles[guildDoc.data.roles[request.auth.uid].roleName].permissions;
    }

    // Helper function to check if the user is an admin (e.g., "Lider")
    function isAdmin(guildId) {
      let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
      return guildDoc.data != null &&
             guildDoc.data.roles != null &&
             guildDoc.data.roles[request.auth.uid] != null &&
             guildDoc.data.roles[request.auth.uid].roleName == "Lider";
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /guilds/{guildId} {
      allow read: if request.auth != null; 
      allow create: if request.auth != null; 
      allow update: if request.auth != null && (
                       request.auth.uid == resource.data.ownerId || // Owner can always update
                       hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_GENERAL") ||
                       hasGuildPermission(guildId, "MANAGE_GUILD_SETTINGS_APPEARANCE") ||
                       hasGuildPermission(guildId, "MANAGE_ROLES_PERMISSIONS") ||
                       hasGuildPermission(guildId, "MANAGE_DKP_SETTINGS") ||
                       hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS")
                     );
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      match /auditLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, "VIEW_AUDIT_LOG");
        // Allow creation if actorId matches current user or if current user is an admin of the guild.
        // This allows client-side logging of user's own actions or admin-initiated logs.
        allow create: if request.auth != null && (
                        request.auth.uid == request.resource.data.actorId || 
                        isAdmin(guildId)
                      );
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /applications/{applicationId} {
        allow read: if request.auth != null && (
                      request.auth.uid == resource.data.applicantId ||
                      hasGuildPermission(guildId, "MANAGE_RECRUITMENT_VIEW_APPLICATIONS")
                    );
        allow create: if request.auth != null; // Anyone can apply
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_RECRUITMENT_PROCESS_APPLICATIONS");
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /events/{eventId} {
        allow read: if request.auth != null; 
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_EVENTS_CREATE");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_EVENTS_EDIT");
        allow delete: if request.auth != null && (
                        hasGuildPermission(guildId, "MANAGE_EVENTS_DELETE") ||
                        request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId
                      );

        match /manualConfirmations/{confirmationId} {
          allow read: if request.auth != null && (
                        request.auth.uid == confirmationId || 
                        hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE") 
                      );
          allow create: if request.auth != null && request.auth.uid == confirmationId; 
          allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_MANUAL_CONFIRMATIONS_APPROVE"); 
          allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
        }
      }

      match /groups/{groupId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_GROUPS_CREATE");
        allow update: if request.auth != null && hasGuildPermission(guildId, "MANAGE_GROUPS_EDIT");
        allow delete: if request.auth != null && (
                        hasGuildPermission(guildId, "MANAGE_GROUPS_DELETE") ||
                        request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId
                      );
      }

      match /notifications/{notificationId} {
        allow read: if request.auth != null; 
        allow create: if request.auth != null && (isAdmin(guildId) || request.auth.uid == request.resource.data.createdByUserId); 
        allow update: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId; 
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /dkpDecayLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS");
        allow create: if request.auth != null && hasGuildPermission(guildId, "MANAGE_DKP_DECAY_SETTINGS"); // Only users with permission can create these logs (e.g., via on-demand trigger)
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }
    }
  }
}

    
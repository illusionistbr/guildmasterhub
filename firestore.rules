
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function getGuildData(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId)).data;
    }

    // Checks if the authenticated user is the owner of the specified guild.
    function isGuildOwner(guildId) {
      return isAuthenticated() && getGuildData(guildId).ownerId == request.auth.uid;
    }

    // Checks if the authenticated user is a member of the specified guild.
    function isGuildMember(guildId) {
      let guildData = getGuildData(guildId);
      return isAuthenticated() &&
             guildData.memberIds != null &&
             request.auth.uid in guildData.memberIds;
    }

    // Checks if the authenticated user has a specific role in the specified guild.
    function isGuildRole(guildId, roleName) {
      let guildData = getGuildData(guildId);
      return isAuthenticated() &&
             guildData.roles != null &&
             guildData.roles[request.auth.uid] == roleName;
    }

    function isGuildLeader(guildId) { return isGuildRole(guildId, "Líder"); }
    function isGuildViceLeader(guildId) { return isGuildRole(guildId, "Vice-Líder"); }
    function isGuildLeaderOrViceLeader(guildId) { return isGuildLeader(guildId) || isGuildViceLeader(guildId); }

    // --- Collections ---

    // User Profiles Collection
    match /users/{userId} {
      // Any authenticated user can read any user profile.
      allow read: if isAuthenticated();
      // A user can only create their own profile document, and the UID in the document must match their auth UID.
      allow create: if isAuthenticated() && request.auth.uid == userId && request.resource.data.uid == userId;
      // A user can only update their own profile document.
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // A user can only delete their own profile document.
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Guilds Collection
    match /guilds/{guildId} {
      // Any authenticated user can read guild data (e.g., for explore page, dashboard).
      // Specific visibility of sensitive data should be handled client-side or with more granular read rules if needed.
      allow read: if isAuthenticated();

      // Authenticated users can create guilds.
      // The creator must be set as ownerId, first member, have memberCount of 1, and Leader role.
      // Also validates the presence of essential fields during creation.
      allow create: if isAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.ownerDisplayName == request.auth.token.name &&
                       request.resource.data.memberIds[0] == request.auth.uid &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.roles[request.auth.uid] == "Líder" &&
                       request.resource.data.createdAt == request.time && // Enforce server timestamp
                       request.resource.data.keys().hasAll(['name', 'ownerId', 'ownerDisplayName', 'memberIds', 'memberCount', 'roles', 'isOpen', 'createdAt', 'game', 'bannerUrl', 'logoUrl']) &&
                       (!('description' in request.resource.data) || request.resource.data.description is string) &&
                       (!('password' in request.resource.data) || request.resource.data.password is string || request.resource.data.password == null) &&
                       (!('socialLinks' in request.resource.data) || request.resource.data.socialLinks is map || request.resource.data.socialLinks == null);


      // Guild updates are conditional based on the user's role and the fields being changed.
      allow update: if isAuthenticated() &&
                       // OwnerId cannot be changed after creation.
                       request.resource.data.ownerId == resource.data.ownerId &&
                       (
                         // SCENARIO 1: Guild Owner updates general guild settings.
                         (
                           isGuildOwner(guildId) &&
                           // Owner can only change these specific fields.
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'password', 'isOpen', 'bannerUrl', 'logoUrl', 'socialLinks', 'game'])
                         ) ||
                         // SCENARIO 2: Leader or Vice-Leader manages members (roles, kick/promote/demote).
                         (
                           isGuildLeaderOrViceLeader(guildId) &&
                           // Only member management fields (memberIds, memberCount, roles) can be changed.
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles']) &&
                           // Ensure memberCount reflects the new size of memberIds.
                           (request.resource.data.memberIds is list && request.resource.data.memberCount == request.resource.data.memberIds.size()) &&
                           (request.resource.data.roles is map) // Roles must be a map.
                         ) ||
                         // SCENARIO 3: Authenticated user joins a guild.
                         (
                           !isGuildMember(guildId) && // User is not already a member.
                           resource.data.memberIds.indexOf(request.auth.uid) == -1 && // Double-check user is not already in memberIds.
                           // Only memberIds, memberCount, and roles can be changed when joining.
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles']) &&
                           // memberIds must be the old list plus the new user.
                           request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                           request.resource.data.memberIds.hasAll(resource.data.memberIds) &&
                           request.resource.data.memberIds.hasAny([request.auth.uid]) &&
                           // memberCount must be incremented by 1.
                           request.resource.data.memberCount == resource.data.memberCount + 1 &&
                           // The joining user gets the "Membro" role.
                           request.resource.data.roles[request.auth.uid] == "Membro" &&
                           // Only the joining user's role is added/changed in the roles map.
                           request.resource.data.roles.keys().hasOnly(resource.data.roles.keys().concat([request.auth.uid])) &&
                           // Guild must be open, or if password-protected, client handles password check.
                           (resource.data.isOpen == true || resource.data.password != null)
                         )
                         // SCENARIO 4: User leaves guild (UI for this not yet implemented).
                         // (
                         //   isGuildMember(guildId) &&
                         //   request.auth.uid != resource.data.ownerId && // Owner can't leave this way.
                         //   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles']) &&
                         //   request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1 &&
                         //   !request.resource.data.memberIds.hasAny([request.auth.uid]) && // User is removed from memberIds.
                         //   request.resource.data.memberCount == resource.data.memberCount - 1 &&
                         //   !(request.auth.uid in request.resource.data.roles.keys()) // User's role is removed from roles map.
                         // )
                       );

      // Only the guild owner can delete the guild.
      allow delete: if isGuildOwner(guildId);

      // Audit Logs Subcollection for each Guild
      match /auditLogs/{logId} {
        // Only Leader or Vice-Leader of the guild can read audit logs.
        allow read: if isGuildLeaderOrViceLeader(guildId);
        // Logs are created when a guild member performs an action.
        // actorId in the log must match the authenticated user's UID.
        // Timestamp must be set using server time.
        allow create: if isGuildMember(guildId) &&
                         request.resource.data.actorId == request.auth.uid &&
                         request.resource.data.timestamp == request.time;
        // Audit logs should be immutable after creation.
        allow update: if false;
        // Only the guild owner can delete audit logs (e.g., during guild deletion).
        allow delete: if isGuildOwner(guildId);
      }
    }
  }
}

    
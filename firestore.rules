
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getGuildDoc(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId));
    }

    function isGuildOwner(guildId) {
      let guildDoc = getGuildDoc(guildId);
      return isUserAuthenticated() && guildDoc.exists && guildDoc.data.ownerId == request.auth.uid;
    }

    function isGuildLeader(guildId) {
      let guildDoc = getGuildDoc(guildId);
      return isUserAuthenticated() &&
             guildDoc.exists &&
             guildDoc.data.roles[request.auth.uid] != null &&
             (
               guildDoc.data.roles[request.auth.uid] == "Lider" ||
               (guildDoc.data.roles[request.auth.uid].generalRole != null && guildDoc.data.roles[request.auth.uid].generalRole == "Lider")
             );
    }

    function isGuildViceLeader(guildId) {
      let guildDoc = getGuildDoc(guildId);
      return isUserAuthenticated() &&
             guildDoc.exists &&
             guildDoc.data.roles[request.auth.uid] != null &&
             (
               guildDoc.data.roles[request.auth.uid] == "ViceLider" ||
               (guildDoc.data.roles[request.auth.uid].generalRole != null && guildDoc.data.roles[request.auth.uid].generalRole == "ViceLider")
             );
    }
    
    function isGuildLeaderOrViceLeader(guildId) {
        return isGuildLeader(guildId) || isGuildViceLeader(guildId);
    }

    function isGuildMember(guildId) {
      let guildDoc = getGuildDoc(guildId);
      return isUserAuthenticated() &&
             guildDoc.exists &&
             (
               guildDoc.data.memberIds != null && request.auth.uid in guildDoc.data.memberIds ||
               guildDoc.data.roles[request.auth.uid] != null
             );
    }
    
    function isValidGuildRoleEnum(role) {
        return role == "Lider" || role == "ViceLider" || role == "Conselheiro" || role == "Oficial" || role == "Membro";
    }

    function isValidTLRoleEnum(role) {
        return role == "Tank" || role == "Healer" || role == "DPS";
    }

    function isValidTLWeaponEnum(weapon) {
        return weapon == "Sword and Shield" || weapon == "Greatsword" || weapon == "Daggers" ||
               weapon == "Crossbow" || weapon == "Bow" || weapon == "Staff" ||
               weapon == "Wand and Tome" || weapon == "Spear";
    }
    
    function isValidMemberStatusEnum(status) {
      return status == "Ativo" || status == "Inativo" || status == "LicenÃ§a";
    }


    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.displayName is string &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.guilds is list && request.resource.data.guilds.size() == 0 &&
                       request.resource.data.lastNotificationsCheckedTimestamp is map && request.resource.data.lastNotificationsCheckedTimestamp.size() == 0 &&
                       (!('gearScore' in request.resource.data) || request.resource.data.gearScore is number);
                       
      allow update: if isUserAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.displayName == request.resource.data.displayName &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       (!('guilds' in request.resource.data) || request.resource.data.guilds is list) &&
                       request.resource.data.lastNotificationsCheckedTimestamp is map &&
                       (!('gearScore' in request.resource.data) || request.resource.data.gearScore is number);
                       
      allow delete: if false;
    }

    match /guilds/{guildId} {
      allow read: if true;

      allow create: if isUserAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                       request.resource.data.game is string && request.resource.data.game.size() >= 1 && request.resource.data.game.size() <= 50 &&
                       request.resource.data.ownerDisplayName is string &&
                       request.resource.data.memberIds is list && request.resource.data.memberIds.size() == 1 && request.auth.uid in request.resource.data.memberIds &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.isOpen == (request.resource.data.password == null || request.resource.data.password == "") &&
                       request.resource.data.bannerUrl is string && request.resource.data.bannerUrl.matches('https://placehold.co/.*') &&
                       request.resource.data.logoUrl is string && request.resource.data.logoUrl.matches('https://placehold.co/.*') &&
                       request.resource.data.roles is map && request.resource.data.roles.keys().hasOnly([request.auth.uid]) &&
                       (request.resource.data.roles[request.auth.uid] is string && request.resource.data.roles[request.auth.uid] == "Lider" ||
                        request.resource.data.roles[request.auth.uid] is map && request.resource.data.roles[request.auth.uid].generalRole == "Lider" &&
                        (!('dkpBalance' in request.resource.data.roles[request.auth.uid]) || request.resource.data.roles[request.auth.uid].dkpBalance is number)
                       ) &&
                       (!('description' in request.resource.data) || request.resource.data.description is string && request.resource.data.description.size() <= 500) &&
                       (!('password' in request.resource.data) || request.resource.data.password is string && request.resource.data.password.size() <= 50) &&
                       (!('socialLinks' in request.resource.data) || request.resource.data.socialLinks is map);

      allow update: if isUserAuthenticated() &&
                       (
                         (isGuildOwner(guildId) &&
                           (
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']) &&
                               request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50) ||
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['password', 'isOpen']) &&
                               (!('password' in request.resource.data) || request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                               request.resource.data.isOpen == (request.resource.data.password == null || request.resource.data.password == "")) ||
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bannerUrl']) && request.resource.data.bannerUrl is string) ||
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['logoUrl']) && request.resource.data.logoUrl is string)
                           )
                         ) ||
                         (isGuildLeaderOrViceLeader(guildId) &&
                           request.resource.data.roles[request.auth.uid] != null &&
                           (
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) &&
                               request.resource.data.roles is map &&
                               request.resource.data.roles.keys().hasAny(resource.data.roles.keys()) &&
                               request.resource.data.roles.keys().hasOnly(resource.data.roles.keys().concat(request.resource.data.roles.addedKeys())) &&
                               request.resource.data.roles.affectedKeys().size() > 0 &&
                               request.resource.data.roles.affectedKeys().map(uid ->
                                 let newRoleInfo = request.resource.data.roles[uid];
                                 let oldRoleInfo = resource.data.roles[uid];
                                 let targetUserIsOwner = uid == resource.data.ownerId;
                                 let currentUserIsLeader = isGuildLeader(guildId);
                                 let newGeneralRole = newRoleInfo is string ? newRoleInfo : newRoleInfo.generalRole;
                                 let oldGeneralRole = oldRoleInfo is string ? oldRoleInfo : oldRoleInfo.generalRole;

                                 (newRoleInfo is string && isValidGuildRoleEnum(newRoleInfo) ||
                                  newRoleInfo is map &&
                                  newRoleInfo.generalRole is string && isValidGuildRoleEnum(newRoleInfo.generalRole) &&
                                  (!('tlRole' in newRoleInfo) || newRoleInfo.tlRole == null || isValidTLRoleEnum(newRoleInfo.tlRole)) &&
                                  (!('tlPrimaryWeapon' in newRoleInfo) || newRoleInfo.tlPrimaryWeapon == null || isValidTLWeaponEnum(newRoleInfo.tlPrimaryWeapon)) &&
                                  (!('tlSecondaryWeapon' in newRoleInfo) || newRoleInfo.tlSecondaryWeapon == null || isValidTLWeaponEnum(newRoleInfo.tlSecondaryWeapon)) &&
                                  (!('notes' in newRoleInfo) || newRoleInfo.notes == null || newRoleInfo.notes is string) &&
                                  (!('status' in newRoleInfo) || newRoleInfo.status == null || isValidMemberStatusEnum(newRoleInfo.status)) &&
                                  (!('dkpBalance' in newRoleInfo) || newRoleInfo.dkpBalance == null || newRoleInfo.dkpBalance is number)
                                 ) &&
                                 (
                                   (uid == request.auth.uid && newGeneralRole == oldGeneralRole) ||
                                   (!targetUserIsOwner &&
                                     (
                                       (currentUserIsLeader && oldGeneralRole != "Lider") ||
                                       (!currentUserIsLeader && oldGeneralRole != "Lider" && oldGeneralRole != "ViceLider")
                                     ) &&
                                     (newGeneralRole != "Lider" || (newGeneralRole == "Lider" && uid == resource.data.ownerId) )
                                   )
                                 ) &&
                                 (newRoleInfo.keys().hasOnly(['generalRole', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon', 'notes', 'status', 'dkpBalance']))
                               ).size() == request.resource.data.roles.affectedKeys().size()
                             ) ||
                             (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles']) &&
                               request.resource.data.memberIds is list &&
                               request.resource.data.memberCount is number &&
                               request.resource.data.memberCount == request.resource.data.memberIds.size() &&
                               (request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                                request.resource.data.memberIds.removeAll(resource.data.memberIds).size() == 1 &&
                                let addedUserId = request.resource.data.memberIds.removeAll(resource.data.memberIds)[0];
                                request.resource.data.roles[addedUserId] != null &&
                                (request.resource.data.roles[addedUserId] is string && request.resource.data.roles[addedUserId] == "Membro" ||
                                 request.resource.data.roles[addedUserId] is map && request.resource.data.roles[addedUserId].generalRole == "Membro" &&
                                 (!('tlRole' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlRole == null || isValidTLRoleEnum(request.resource.data.roles[addedUserId].tlRole)) &&
                                 (!('tlPrimaryWeapon' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlPrimaryWeapon == null || isValidTLWeaponEnum(request.resource.data.roles[addedUserId].tlPrimaryWeapon)) &&
                                 (!('tlSecondaryWeapon' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlSecondaryWeapon == null || isValidTLWeaponEnum(request.resource.data.roles[addedUserId].tlSecondaryWeapon)) &&
                                 (!('notes' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].notes == null || request.resource.data.roles[addedUserId].notes is string) &&
                                 (!('status' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].status == null || isValidMemberStatusEnum(request.resource.data.roles[addedUserId].status)) &&
                                 (!('dkpBalance' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].dkpBalance is number) &&
                                 request.resource.data.roles[addedUserId].keys().hasOnly(['generalRole', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon', 'notes', 'status', 'dkpBalance'])
                                )
                               ) ||
                               (request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1 &&
                                resource.data.memberIds.removeAll(request.resource.data.memberIds).size() == 1 &&
                                let removedUserId = resource.data.memberIds.removeAll(request.resource.data.memberIds)[0];
                                request.resource.data.roles[removedUserId] == null && removedUserId != resource.data.ownerId
                               )
                             )
                           )
                         ) ||
                         (isUserAuthenticated() &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles']) &&
                           resource.data.isOpen == true &&
                           request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                           request.resource.data.memberIds.removeAll(resource.data.memberIds).size() == 1 &&
                           let addedUserId = request.resource.data.memberIds.removeAll(resource.data.memberIds)[0];
                           addedUserId == request.auth.uid &&
                           request.resource.data.roles[addedUserId] != null &&
                           (request.resource.data.roles[addedUserId] is string && request.resource.data.roles[addedUserId] == "Membro" ||
                            request.resource.data.roles[addedUserId] is map && request.resource.data.roles[addedUserId].generalRole == "Membro" &&
                            (!('tlRole' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlRole == null || isValidTLRoleEnum(request.resource.data.roles[addedUserId].tlRole)) &&
                            (!('tlPrimaryWeapon' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlPrimaryWeapon == null || isValidTLWeaponEnum(request.resource.data.roles[addedUserId].tlPrimaryWeapon)) &&
                            (!('tlSecondaryWeapon' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].tlSecondaryWeapon == null || isValidTLWeaponEnum(request.resource.data.roles[addedUserId].tlSecondaryWeapon)) &&
                            (!('notes' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].notes is string) &&
                            (!('status' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].status == null || isValidMemberStatusEnum(request.resource.data.roles[addedUserId].status)) &&
                            (!('dkpBalance' in request.resource.data.roles[addedUserId]) || request.resource.data.roles[addedUserId].dkpBalance is number) &&
                            request.resource.data.roles[addedUserId].keys().hasOnly(['generalRole', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon', 'notes', 'status', 'dkpBalance'])
                           )
                         )
                       ) &&
                       request.resource.data.ownerId == resource.data.ownerId &&
                       request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isGuildOwner(guildId);

      match /applications/{applicationId} {
        allow read: if isGuildLeaderOrViceLeader(guildId) ||
                         (isUserAuthenticated() && resource.data.applicantId == request.auth.uid);
        allow create: if isUserAuthenticated() &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.applicantId == request.auth.uid &&
                         request.resource.data.applicantName is string &&
                         request.resource.data.applicantDisplayName is string &&
                         (request.resource.data.applicantPhotoURL == null || request.resource.data.applicantPhotoURL is string) &&
                         request.resource.data.gearScore is number && request.resource.data.gearScore >= 0 &&
                         request.resource.data.gearScoreScreenshotUrl is string && request.resource.data.gearScoreScreenshotUrl.matches('https://.*') &&
                         request.resource.data.discordNick is string &&
                         request.resource.data.submittedAt == request.time &&
                         (
                           (getGuildDoc(guildId).data.isOpen == true && request.resource.data.status == 'auto_approved' && request.resource.data.reviewedBy == 'system' && request.resource.data.reviewedAt == request.time) ||
                           (getGuildDoc(guildId).data.isOpen == false && request.resource.data.status == 'pending' && !('reviewedBy' in request.resource.data) && !('reviewedAt' in request.resource.data) )
                         ) &&
                         (getGuildDoc(guildId).data.game != "Throne and Liberty" || (
                           request.resource.data.tlRole is string && isValidTLRoleEnum(request.resource.data.tlRole) &&
                           request.resource.data.tlPrimaryWeapon is string && isValidTLWeaponEnum(request.resource.data.tlPrimaryWeapon) &&
                           request.resource.data.tlSecondaryWeapon is string && isValidTLWeaponEnum(request.resource.data.tlSecondaryWeapon)
                         )) &&
                         request.resource.data.keys().hasOnly(['guildId', 'applicantId', 'applicantName', 'applicantDisplayName', 'applicantPhotoURL', 'gearScore', 'gearScoreScreenshotUrl', 'discordNick', 'status', 'submittedAt', 'tlRole', 'tlPrimaryWeapon', 'tlSecondaryWeapon', 'reviewedBy', 'reviewedAt']);
        allow update: if isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.applicantId == resource.data.applicantId &&
                         request.resource.data.submittedAt == resource.data.submittedAt &&
                         (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected') &&
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt == request.time &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reviewedBy', 'reviewedAt']);
        allow delete: if isGuildOwner(guildId);
      }

      match /auditLogs/{auditLogId} {
        allow read: if isGuildLeaderOrViceLeader(guildId);
        allow create: if isUserAuthenticated() &&
                         (isGuildLeaderOrViceLeader(guildId) || request.resource.data.actorId == request.auth.uid) &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.actorId == request.auth.uid &&
                         (request.resource.data.actorDisplayName == null || request.resource.data.actorDisplayName is string) &&
                         request.resource.data.action is string &&
                         request.resource.data.details is map;
        allow update: if false;
        allow delete: if false;
      }

      match /events/{eventId} {
        allow read: if isGuildMember(guildId);
        allow create: if isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                         request.resource.data.date is string && request.resource.data.date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
                         request.resource.data.time is string && request.resource.data.time.matches('^[0-9]{2}:[0-9]{2}$') &&
                         request.resource.data.organizerId == request.auth.uid &&
                         request.resource.data.createdAt == request.time &&
                         (!('description' in request.resource.data) || request.resource.data.description is string) &&
                         (!('endDate' in request.resource.data) || request.resource.data.endDate is string && request.resource.data.endDate.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$')) &&
                         (!('endTime' in request.resource.data) || request.resource.data.endTime is string && request.resource.data.endTime.matches('^[0-9]{2}:[0-9]{2}$')) &&
                         (!('location' in request.resource.data) || request.resource.data.location is string) &&
                         (!('dkpValue' in request.resource.data) || request.resource.data.dkpValue is number && request.resource.data.dkpValue >= 0) &&
                         (!('requiresPin' in request.resource.data) || request.resource.data.requiresPin is bool) &&
                         (!('pinCode' in request.resource.data) || (request.resource.data.requiresPin == true && request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6)) &&
                         (!('attendeesWithPin' in request.resource.data) || request.resource.data.attendeesWithPin is list) &&
                         (!('category' in request.resource.data) || request.resource.data.category is string) &&
                         (!('subCategory' in request.resource.data) || request.resource.data.subCategory is string) &&
                         (!('attendeeIds' in request.resource.data) || request.resource.data.attendeeIds is list);
        allow update: if (isGuildLeaderOrViceLeader(guildId) && request.resource.data.organizerId == resource.data.organizerId && request.resource.data.createdAt == resource.data.createdAt) ||
                         (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeesWithPin']) && request.auth.uid in request.resource.data.attendeesWithPin && !(request.auth.uid in resource.data.attendeesWithPin));
        allow delete: if isGuildLeaderOrViceLeader(guildId);
      }
      
      match /groups/{groupId} {
        allow read: if isGuildMember(guildId);
        allow create: if isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string &&
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         request.resource.data.members.map(member ->
                           member.memberId is string &&
                           member.displayName is string &&
                           (member.photoURL == null || member.photoURL is string) &&
                           (!('note' in member) || member.note == null || member.note is string && member.note.size() <= 100) &&
                           member.keys().hasOnly(['memberId', 'displayName', 'photoURL', 'note'])
                         ).size() == request.resource.data.members.size() &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.createdBy == request.auth.uid &&
                         request.resource.data.keys().hasOnly(['guildId', 'name', 'icon', 'headerColor', 'members', 'createdAt', 'createdBy']);
        allow update: if isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string &&
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         request.resource.data.members.map(member ->
                           member.memberId is string &&
                           member.displayName is string &&
                           (member.photoURL == null || member.photoURL is string) &&
                           (!('note' in member) || member.note == null || member.note is string && member.note.size() <= 100) &&
                           member.keys().hasOnly(['memberId', 'displayName', 'photoURL', 'note'])
                         ).size() == request.resource.data.members.size() &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.createdBy == resource.data.createdBy &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'icon', 'headerColor', 'members']);
        allow delete: if isGuildLeaderOrViceLeader(guildId);
      }

      match /notifications/{notificationId} {
        allow read: if isGuildMember(guildId);
        allow create: if isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.message is string &&
                         request.resource.data.type is string &&
                         request.resource.data.link is string &&
                         request.resource.data.timestamp == request.time &&
                         (!('details' in request.resource.data) || request.resource.data.details is map) &&
                         (!('createdByUserId' in request.resource.data) || request.resource.data.createdByUserId is string) &&
                         (!('createdByUserDisplayname' in request.resource.data) || request.resource.data.createdByUserDisplayname == null || request.resource.data.createdByUserDisplayname is string) &&
                         (!('targetUserId' in request.resource.data) || request.resource.data.targetUserId is string) &&
                         (!('isRead' in request.resource.data) || request.resource.data.isRead is bool);
        allow update: if false;
        allow delete: if isGuildLeaderOrViceLeader(guildId);
      }
    }
  }
}

    
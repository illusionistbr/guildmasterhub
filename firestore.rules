
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getGuildDoc(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId)).data;
    }

    function isGuildOwner(guildId) {
      let guildData = getGuildDoc(guildId);
      return isSignedIn() && guildData.ownerId == request.auth.uid;
    }

    function isGuildMember(guildId) {
      let guildData = getGuildDoc(guildId);
      return isSignedIn() && request.auth.uid in guildData.memberIds;
    }
    
    function isGuildLeader(guildId) {
      let guildData = getGuildDoc(guildId);
      return isSignedIn() && 
             guildData.roles[request.auth.uid] is map && 
             guildData.roles[request.auth.uid].generalRole == 'Líder';
    }

    function isGuildLeaderOrViceLeader(guildId) {
      let guildData = getGuildDoc(guildId);
      return isSignedIn() &&
             guildData.roles != null && // Ensure roles map exists
             request.auth.uid in guildData.roles && // Ensure user has a role entry
             guildData.roles[request.auth.uid] is map &&
             (guildData.roles[request.auth.uid].generalRole == 'Líder' ||
              guildData.roles[request.auth.uid].generalRole == 'Vice-Líder');
    }

    // USERS collection
    match /users/{userId} {
      allow read: if true; // Public profiles, or adjust as needed
      allow create: if isUser(userId) && 
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.displayName is string &&
                       request.resource.data.displayName.size() > 0 &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'guilds', 'lastNotificationsCheckedTimestamp']) &&
                       request.resource.data.photoURL is string || request.resource.data.photoURL == null &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.guilds is list &&
                       request.resource.data.guilds.size() == 0 &&
                       request.resource.data.lastNotificationsCheckedTimestamp is map;
      allow update: if isUser(userId) &&
                       // Allow updating only specific, non-critical fields by the user
                       request.resource.data.uid == resource.data.uid && // Cannot change UID
                       request.resource.data.email == resource.data.email && // Cannot change email directly here
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change creation date
                       // Allow changes to displayName, photoURL, and lastNotificationsCheckedTimestamp
                       request.resource.data.displayName is string || request.resource.data.displayName == null &&
                       request.resource.data.photoURL is string || request.resource.data.photoURL == null &&
                       request.resource.data.lastNotificationsCheckedTimestamp is map &&
                       // Guilds list is managed by server-side logic (joining/leaving guilds)
                       request.resource.data.guilds == resource.data.guilds; 
                       // Ensure only allowed fields are present if you want to be very strict:
                       // request.resource.data.keys().hasOnly(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'guilds', 'lastNotificationsCheckedTimestamp']);
      allow delete: if false; // Generally, users don't delete their own accounts directly via client
    }

    // GUILDS collection
    match /guilds/{guildId} {
      allow read: if true; // Allow public listing/viewing of guilds
      allow create: if isSignedIn() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                       request.resource.data.game is string && request.resource.data.game.size() > 0 &&
                       request.resource.data.memberIds[0] == request.auth.uid && request.resource.data.memberIds.size() == 1 &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.roles[request.auth.uid] is map &&
                       request.resource.data.roles[request.auth.uid].generalRole == 'Líder' &&
                       (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                       request.resource.data.isOpen == (request.resource.data.password == null) &&
                       (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
                       (request.resource.data.socialLinks == null || request.resource.data.socialLinks is map) &&
                       (request.resource.data.bannerUrl is string || request.resource.data.bannerUrl == null) &&
                       (request.resource.data.logoUrl is string || request.resource.data.logoUrl == null) &&
                       request.resource.data.ownerDisplayName == request.auth.token.name || request.resource.data.ownerDisplayName == request.auth.token.email || request.resource.data.ownerDisplayName == 'Dono Desconhecido'
                       ;

      allow update: if isSignedIn() && isGuildOwner(guildId) && // Only owner can update main guild settings like name, password, visibility
                       request.resource.data.ownerId == resource.data.ownerId && // Owner cannot be changed here
                       request.resource.data.createdAt == resource.data.createdAt && // Creation time cannot change
                       (request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 || request.resource.data.name == resource.data.name) &&
                       (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50) || request.resource.data.password == resource.data.password) &&
                       (request.resource.data.isOpen == (request.resource.data.password == null) || request.resource.data.isOpen == resource.data.isOpen) &&
                       (request.resource.data.description is string || request.resource.data.description == null || request.resource.data.description == resource.data.description) &&
                       (request.resource.data.bannerUrl is string || request.resource.data.bannerUrl == null || request.resource.data.bannerUrl == resource.data.bannerUrl) &&
                       (request.resource.data.logoUrl is string || request.resource.data.logoUrl == null || request.resource.data.logoUrl == resource.data.logoUrl) &&
                       (request.resource.data.socialLinks is map || request.resource.data.socialLinks == null || request.resource.data.socialLinks == resource.data.socialLinks)
                       // For memberIds, memberCount, and roles - more specific rules below or through functions
                       || 
                       (isSignedIn() && isGuildLeaderOrViceLeader(guildId) && // Leader/Vice can update member roles, kick members (affecting memberIds, memberCount, roles)
                        request.resource.data.name == resource.data.name && // Name can only be changed by owner
                        request.resource.data.password == resource.data.password && // Password only by owner
                        request.resource.data.ownerId == resource.data.ownerId &&
                        request.resource.data.createdAt == resource.data.createdAt &&
                        // Allow changes to roles map by leader/vice-leader
                        request.resource.data.roles != null && 
                        (request.resource.data.roles.affectedKeys().hasOnly(request.resource.data.memberIds) || request.resource.data.roles.affectedKeys().hasOnly(resource.data.memberIds)) &&
                        // When roles are changed, memberIds and memberCount might also change
                        request.resource.data.memberIds is list && 
                        request.resource.data.memberCount is number && 
                        request.resource.data.memberCount == request.resource.data.memberIds.size()
                       )
                       ||
                       (isSignedIn() && // User joining or leaving a guild (applies to themselves)
                        request.resource.data.name == resource.data.name && 
                        request.resource.data.password == resource.data.password && 
                        request.resource.data.ownerId == resource.data.ownerId &&
                        request.resource.data.createdAt == resource.data.createdAt &&
                        (
                          // User is joining
                          (request.auth.uid in request.resource.data.memberIds && !(request.auth.uid in resource.data.memberIds) &&
                           request.resource.data.memberCount == resource.data.memberCount + 1 &&
                           request.resource.data.roles[request.auth.uid] is map && // New role info for joining member
                           request.resource.data.roles[request.auth.uid].generalRole == 'Membro' // Default role on join
                          ) ||
                          // User is leaving
                          (!(request.auth.uid in request.resource.data.memberIds) && request.auth.uid in resource.data.memberIds &&
                           request.resource.data.memberCount == resource.data.memberCount - 1 &&
                           !(request.auth.uid in request.resource.data.roles) // Role info removed when leaving
                          )
                        ) &&
                         // Ensure user is only modifying their own DKP balance (if DKP is awarded/spent)
                         (request.resource.data.roles[request.auth.uid].dkpBalance == resource.data.roles[request.auth.uid].dkpBalance + incomingData().roles[request.auth.uid].dkpBalanceDelta || // for increment
                          request.resource.data.roles[request.auth.uid].dkpBalance == resource.data.roles[request.auth.uid].dkpBalance) && // no change
                         request.resource.data.roles[request.auth.uid].dkpBalance is number
                       );
                       
      allow delete: if isSignedIn() && isGuildOwner(guildId); // Only guild owner can delete

      // Subcollection: Audit Logs
      match /auditLogs/{logId} {
        allow read: if isSignedIn() && isGuildLeaderOrViceLeader(guildId);
        allow create: if isSignedIn() && 
                         (isGuildLeaderOrViceLeader(guildId) || request.auth.uid == request.resource.data.actorId) && // System/user can log their own actions
                         request.resource.data.actorId == request.auth.uid &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.action is string &&
                         (request.resource.data.actorDisplayName == request.auth.token.name || request.resource.data.actorDisplayName == request.auth.token.email || request.resource.data.actorDisplayName == 'Sistema');
        allow update: if false;
        allow delete: if false;
      }

      // Subcollection: Applications
      match /applications/{applicationId} {
        allow read: if isSignedIn() && (isGuildLeaderOrViceLeader(guildId) || request.auth.uid == resource.data.applicantId);
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.applicantId && // Applicant creates their own application
                         request.resource.data.guildId == guildId &&
                         request.resource.data.status == 'pending' || request.resource.data.status == 'auto_approved' && // For public guilds
                         request.resource.data.submittedAt == request.time;
        allow update: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) && // Leader/Vice can approve/reject
                         request.resource.data.guildId == guildId &&
                         request.resource.data.applicantId == resource.data.applicantId && // Cannot change applicant
                         request.resource.data.submittedAt == resource.data.submittedAt && // Cannot change submission time
                         (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected') &&
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt == request.time;
        allow delete: if isSignedIn() && isGuildOwner(guildId); // Only owner can delete old applications, perhaps
      }

      // Subcollection: Events
      match /events/{eventId} {
        allow read: if isSignedIn() && isGuildMember(guildId);
        allow create: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.organizerId == request.auth.uid &&
                         request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                         request.resource.data.date is string && request.resource.data.date.matches('^\\d{4}-\\d{2}-\\d{2}$') &&
                         request.resource.data.time is string && request.resource.data.time.matches('^\\d{2}:\\d{2}$') &&
                         (request.resource.data.description == null || request.resource.data.description is string) &&
                         (request.resource.data.endDate == null || (request.resource.data.endDate is string && request.resource.data.endDate.matches('^\\d{4}-\\d{2}-\\d{2}$'))) &&
                         (request.resource.data.endTime == null || (request.resource.data.endTime is string && request.resource.data.endTime.matches('^\\d{2}:\\d{2}$'))) &&
                         (request.resource.data.dkpValue == null || request.resource.data.dkpValue is number) &&
                         (request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool) &&
                         (request.resource.data.pinCode == null || (request.resource.data.requiresPin == true && request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6)) &&
                         (request.resource.data.category == null || request.resource.data.category is string) &&
                         (request.resource.data.subCategory == null || request.resource.data.subCategory is string) &&
                         request.resource.data.createdAt == request.time;
        allow update: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) && // Leader/Vice can update event details
                         request.resource.data.guildId == guildId &&
                         request.resource.data.organizerId == resource.data.organizerId && // Organizer doesn't change
                         request.resource.data.createdAt == resource.data.createdAt // Creation time doesn't change
                         // Allow updating event fields
                      ||
                      isSignedIn() && isGuildMember(guildId) && // Member updating their attendance via PIN
                         request.resource.data.attendeesWithPin.hasAny([request.auth.uid]) && // User is adding themselves
                         request.resource.data.attendeesWithPin.size() == resource.data.attendeesWithPin.size() + 1 && // Only adding one
                         // Ensure other fields are not changed by member
                         request.resource.data.title == resource.data.title &&
                         request.resource.data.description == resource.data.description &&
                         request.resource.data.date == resource.data.date &&
                         request.resource.data.time == resource.data.time &&
                         request.resource.data.dkpValue == resource.data.dkpValue &&
                         request.resource.data.pinCode == resource.data.pinCode; 
        allow delete: if isSignedIn() && isGuildLeaderOrViceLeader(guildId);
      }
      
      // Subcollection: Notifications
      match /notifications/{notificationId} {
        allow read: if isSignedIn() && isGuildMember(guildId); // Members can read notifications for their guild
        allow create: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) && // Only Leader/Vice can create notifications
                         request.resource.data.guildId == guildId &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.message is string && request.resource.data.message.size() > 0 &&
                         request.resource.data.link is string &&
                         request.resource.data.type is string;
        allow update: if false; // Notifications are generally immutable once created
        allow delete: if isSignedIn() && isGuildOwner(guildId); // Owner might be able to clear old notifications
      }

      // Subcollection: Groups
      match /groups/{groupId} {
        allow read: if isSignedIn() && isGuildMember(guildId);
        allow create: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.createdBy == request.auth.uid &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string && request.resource.data.headerColor.startsWith('bg-') && // Basic check
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         request.resource.data.members[0].memberId is string; // Basic check for first member
                         // Further validation for each member in list can be complex in rules, often handled client-side or via functions
        allow update: if isSignedIn() && isGuildLeaderOrViceLeader(guildId) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.createdBy == resource.data.createdBy && // Creator doesn't change
                         request.resource.data.createdAt == resource.data.createdAt; // Creation time doesn't change
                         // Add specific field update validations as needed
        allow delete: if isSignedIn() && isGuildLeaderOrViceLeader(guildId);
      }
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific permission for a guild
    function hasGuildPermission(guildId, permission) {
      // Ensure the user is authenticated
      if (request.auth == null) {
        return false;
      }
      // Get the guild document
      let guild = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      // Check if guild data and roles exist
      if (guild == null || guild.roles == null || guild.roles[request.auth.uid] == null) {
        return false;
      }
      let userRoleName = guild.roles[request.auth.uid].roleName;
      // Check if customRoles and the specific role exist
      if (guild.customRoles == null || guild.customRoles[userRoleName] == null || guild.customRoles[userRoleName].permissions == null) {
        return false;
      }
      // Check if the permission exists in the role's permissions map (assuming permissions are stored as a map for efficient lookup)
      // E.g., permissions: {"MANAGE_MEMBERS_KICK": true, "VIEW_AUDIT_LOG": true}
      // If permissions are stored as an array, this needs to be: permission in guild.customRoles[userRoleName].permissions
      return guild.customRoles[userRoleName].permissions[permission] == true;
    }

    // Helper function to check if the user is an admin (Lider or has MANAGE_ROLES_PERMISSIONS)
    function isAdmin(guildId) {
      if (request.auth == null) {
        return false;
      }
      let guild = get(/databases/$(database)/documents/guilds/$(guildId)).data;
      if (guild == null) {
        return false;
      }
      // Direct owner check
      if (guild.ownerId == request.auth.uid) {
        return true;
      }
      // Check based on 'Lider' role or specific admin permission
      return hasGuildPermission(guildId, 'MANAGE_ROLES_PERMISSIONS');
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /guilds/{guildId} {
      allow read: if request.auth != null; // Allow any authenticated user to read basic guild info for listing/discovery
      allow create: if request.auth != null; // User must be authenticated to create a guild
      allow update: if request.auth != null && (
                      request.auth.uid == resource.data.ownerId || // Owner can update
                      hasGuildPermission(guildId, 'MANAGE_GUILD_SETTINGS_GENERAL') ||
                      hasGuildPermission(guildId, 'MANAGE_GUILD_SETTINGS_APPEARANCE') ||
                      hasGuildPermission(guildId, 'MANAGE_ROLES_PERMISSIONS') ||
                      hasGuildPermission(guildId, 'MANAGE_DKP_SETTINGS') ||
                      hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS')
                    );
      // IMPORTANT: Only the owner can delete the guild document itself.
      // Subcollection deletion permissions are handled separately below.
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Guild Subcollections
      match /auditLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, 'VIEW_AUDIT_LOG');
        allow create: if request.auth != null && isAdmin(guildId); // Or more specific if needed
        // Guild owner must be able to delete for the cascading delete logic from client
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }

      match /applications/{applicationId} {
        allow read: if request.auth != null && (
                      request.auth.uid == resource.data.applicantId || // Applicant can read their own
                      hasGuildPermission(guildId, 'MANAGE_RECRUITMENT_VIEW_APPLICATIONS')
                    );
        allow create: if request.auth != null; // Anyone can apply
        allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_RECRUITMENT_PROCESS_APPLICATIONS'); // Admins can update (approve/reject)
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId; // Owner can delete old applications for cleanup
      }

      match /events/{eventId} {
        allow read: if request.auth != null; // All authenticated users (members or not) can see events if they know the guildId
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_EVENTS_CREATE');
        allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_EVENTS_EDIT');
        allow delete: if request.auth != null && (
                        hasGuildPermission(guildId, 'MANAGE_EVENTS_DELETE') ||
                        request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId // Owner for full cleanup
                      );

        match /manualConfirmations/{userId} {
            allow read: if request.auth != null && (request.auth.uid == userId || hasGuildPermission(guildId, 'MANAGE_MANUAL_CONFIRMATIONS_APPROVE'));
            allow create: if request.auth != null && request.auth.uid == userId; // User creates their own confirmation
            allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_MANUAL_CONFIRMATIONS_APPROVE'); // Admin approves/rejects
            // Owner for full cleanup during guild delete
            allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
        }
      }

      match /groups/{groupId} {
        allow read: if request.auth != null; // Assuming all guild members can view groups
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_GROUPS_CREATE');
        allow update: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_GROUPS_EDIT');
        allow delete: if request.auth != null && (
                        hasGuildPermission(guildId, 'MANAGE_GROUPS_DELETE') ||
                        request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId // Owner for full cleanup
                      );
      }

      match /notifications/{notificationId} {
          allow read: if request.auth != null; // Allow members to read notifications
          allow create: if request.auth != null && (isAdmin(guildId) || hasGuildPermission(guildId, 'MANAGE_EVENTS_CREATE')); // System or authorized roles create
          // Generally, notifications might not be user-deletable, but owner needs it for guild delete
          allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }
      
      match /dkpDecayLogs/{logId} {
        allow read: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS');
        allow create: if request.auth != null && hasGuildPermission(guildId, 'MANAGE_DKP_DECAY_SETTINGS');
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId;
      }
    }
  }
}

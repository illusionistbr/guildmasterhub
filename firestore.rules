
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for role checks
    function isUserAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserRole(guildDoc) {
      if (isUserAuthenticated() && guildDoc.data.roles[request.auth.uid] != null) {
        let roleInfo = guildDoc.data.roles[request.auth.uid];
        if (roleInfo is string) { // Old format
          return roleInfo;
        } else if (roleInfo is map && roleInfo.generalRole is string) { // New format
          return roleInfo.generalRole;
        }
      }
      return null;
    }

    function isGuildOwner(guildDoc) {
      return isUserAuthenticated() && guildDoc.data.ownerId == request.auth.uid;
    }

    function isGuildLeader(guildDoc) {
      return isGuildOwner(guildDoc) || getUserRole(guildDoc) == "Líder";
    }

    function isGuildViceLeader(guildDoc) {
      return getUserRole(guildDoc) == "Vice-Líder";
    }

    function isGuildOfficerOrHigher(guildDoc) {
      let userRole = getUserRole(guildDoc);
      return isGuildLeader(guildDoc) || isGuildViceLeader(guildDoc) || userRole == "Conselheiro" || userRole == "Oficial";
    }

    function isGuildMember(guildDoc) {
      return isUserAuthenticated() && (
        guildDoc.data.ownerId == request.auth.uid ||
        (guildDoc.data.memberIds is list && request.auth.uid in guildDoc.data.memberIds)
      );
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.displayName is string && request.resource.data.displayName.size() > 0 &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                       request.resource.data.createdAt == request.time &&
                       (!('guilds' in request.resource.data) || request.resource.data.guilds is list) &&
                       (!('lastNotificationsCheckedTimestamp' in request.resource.data) || request.resource.data.lastNotificationsCheckedTimestamp is map);
      allow update: if isUserAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid && // uid cannot change
                       request.resource.data.email == resource.data.email && // email cannot change
                       request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                       request.resource.data.displayName is string && request.resource.data.displayName.size() > 0 &&
                       (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                       (!('guilds' in request.resource.data) || request.resource.data.guilds is list) &&
                       (!('lastNotificationsCheckedTimestamp' in request.resource.data) || request.resource.data.lastNotificationsCheckedTimestamp is map);
      // No delete for user profiles by users themselves for now.
    }

    // GUILDS
    match /guilds/{guildId} {
      allow read: if true; // Anyone can read guild lists/public info

      allow create: if isUserAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                       (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
                       request.resource.data.game is string && request.resource.data.game.size() >= 1 && request.resource.data.game.size() <= 50 &&
                       (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                       (request.resource.data.socialLinks == null || (
                         request.resource.data.socialLinks is map &&
                         (request.resource.data.socialLinks.size() == 0 || (
                           (!('facebook' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.facebook is string && request.resource.data.socialLinks.facebook.size() <= 200)) &&
                           (!('x' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.x is string && request.resource.data.socialLinks.x.size() <= 200)) &&
                           (!('youtube' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.youtube is string && request.resource.data.socialLinks.youtube.size() <= 200)) &&
                           (!('discord' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.discord is string && request.resource.data.socialLinks.discord.size() <= 200))
                         ))
                       )) &&
                       request.resource.data.ownerDisplayName == request.auth.token.name &&
                       request.resource.data.memberIds is list && request.resource.data.memberIds.size() == 1 && request.auth.uid in request.resource.data.memberIds &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.isOpen == (request.resource.data.password == null) &&
                       request.resource.data.bannerUrl is string &&
                       request.resource.data.logoUrl is string &&
                       request.resource.data.roles is map && request.resource.data.roles.size() == 1 &&
                       request.auth.uid in request.resource.data.roles &&
                       (request.resource.data.roles[request.auth.uid] == "Líder" || // old format direct role string
                        (request.resource.data.roles[request.auth.uid] is map && request.resource.data.roles[request.auth.uid].generalRole == "Líder")); // new format map with generalRole


      allow update: if isUserAuthenticated() {
                      let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
                      // Owner can update most fields
                      if (isGuildOwner(guildDoc)) {
                        return request.resource.data.ownerId == resource.data.ownerId && // ownerId cannot change via this path
                               request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                               request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                               (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
                               request.resource.data.game == resource.data.game && // Game cannot change after creation by owner for now
                               (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                               (request.resource.data.socialLinks == null || (
                                 request.resource.data.socialLinks is map &&
                                 (request.resource.data.socialLinks.size() == 0 || (
                                   (!('facebook' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.facebook is string && request.resource.data.socialLinks.facebook.size() <= 200)) &&
                                   (!('x' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.x is string && request.resource.data.socialLinks.x.size() <= 200)) &&
                                   (!('youtube' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.youtube is string && request.resource.data.socialLinks.youtube.size() <= 200)) &&
                                   (!('discord' in request.resource.data.socialLinks) || (request.resource.data.socialLinks.discord is string && request.resource.data.socialLinks.discord.size() <= 200))
                                 ))
                               )) &&
                               request.resource.data.ownerDisplayName == resource.data.ownerDisplayName &&
                               request.resource.data.memberIds is list &&
                               request.resource.data.memberCount is number &&
                               request.resource.data.isOpen == (request.resource.data.password == null) &&
                               request.resource.data.bannerUrl is string &&
                               request.resource.data.logoUrl is string &&
                               request.resource.data.roles is map;
                      }
                      // Leader/Vice-Leader can update specific member-related fields (roles, notes, status, DKP), and potentially memberIds/memberCount through specific actions
                      else if (isGuildLeader(guildDoc) || isGuildViceLeader(guildDoc)) {
                        // Check if only roles, memberIds, memberCount are being changed for member management
                        let allowedFields = ['roles', 'memberIds', 'memberCount'];
                        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
                        return changedKeys.hasOnly(allowedFields) &&
                               request.resource.data.roles is map &&
                               request.resource.data.memberIds is list &&
                               request.resource.data.memberCount == request.resource.data.memberIds.size();
                      }
                      // Public guild join (user adding themselves)
                      else if (guildDoc.data.isOpen == true &&
                               request.resource.data.memberIds == resource.data.memberIds.concat([request.auth.uid]) &&
                               request.resource.data.memberCount == resource.data.memberCount + 1 &&
                               request.resource.data.roles[request.auth.uid] is map &&
                               request.resource.data.roles[request.auth.uid].generalRole == "Membro" &&
                               // Ensure only the new member's role is added/updated and other roles are unchanged
                               request.resource.data.roles.affectedKeys(["removed", "changed"]).hasOnly([request.auth.uid]) &&
                               // Ensure other fields are not changed by the joining user
                               request.resource.data.name == resource.data.name &&
                               request.resource.data.description == resource.data.description &&
                               request.resource.data.game == resource.data.game &&
                               request.resource.data.bannerUrl == resource.data.bannerUrl &&
                               request.resource.data.logoUrl == resource.data.logoUrl &&
                               request.resource.data.ownerId == resource.data.ownerId &&
                               request.resource.data.password == resource.data.password &&
                               request.resource.data.isOpen == resource.data.isOpen
                              ) {
                        return true;
                      }
                      return false;
                    }

      allow delete: if isUserAuthenticated() && isGuildOwner(get(/databases/$(database)/documents/guilds/$(guildId)));


      // APPLICATIONS Subcollection
      match /applications/{applicationId} {
        allow read: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId)));

        allow create: if isUserAuthenticated() &&
                         request.resource.data.applicantId == request.auth.uid &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.applicantName is string && request.resource.data.applicantName.size() >= 2 && request.resource.data.applicantName.size() <= 50 &&
                         request.resource.data.applicantDisplayName is string &&
                         (request.resource.data.applicantPhotoURL == null || request.resource.data.applicantPhotoURL is string) &&
                         request.resource.data.gearScore is number && request.resource.data.gearScore >= 0 && request.resource.data.gearScore <= 10000 &&
                         request.resource.data.gearScoreScreenshotUrl is string && request.resource.data.gearScoreScreenshotUrl.matches('https?://.+') &&
                         request.resource.data.discordNick is string && request.resource.data.discordNick.size() >= 2 && request.resource.data.discordNick.size() <= 50 &&
                         request.resource.data.submittedAt == request.time &&
                         (
                           (request.resource.data.status == 'pending') ||
                           (request.resource.data.status == 'auto_approved' && get(/databases/$(database)/documents/guilds/$(guildId)).data.isOpen == true)
                         ) &&
                         // TL Specific fields (optional unless guild is TL)
                         (get(/databases/$(database)/documents/guilds/$(guildId)).data.game != "Throne and Liberty" || (
                            request.resource.data.tlRole is string && (request.resource.data.tlRole == "Tank" || request.resource.data.tlRole == "Healer" || request.resource.data.tlRole == "DPS") &&
                            request.resource.data.tlPrimaryWeapon is string && // Add specific weapon enum checks if needed
                            request.resource.data.tlSecondaryWeapon is string  // Add specific weapon enum checks if needed
                         )) &&
                         (get(/databases/$(database)/documents/guilds/$(guildId)).data.game == "Throne and Liberty" || (
                            request.resource.data.tlRole == null &&
                            request.resource.data.tlPrimaryWeapon == null &&
                            request.resource.data.tlSecondaryWeapon == null
                         ));


        allow update: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) &&
                         request.resource.data.applicantId == resource.data.applicantId && // Cannot change applicant
                         request.resource.data.guildId == resource.data.guildId && // Cannot change guild
                         request.resource.data.submittedAt == resource.data.submittedAt && // Cannot change submission time
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt == request.time &&
                         (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected');
        allow delete: if isUserAuthenticated() && isGuildLeader(get(/databases/$(database)/documents/guilds/$(guildId))); // Only Leaders can delete applications for now
      }

      // AUDIT LOGS Subcollection
      match /auditLogs/{logId} {
        allow read: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId)));
        allow create: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) &&
                         request.resource.data.actorId == request.auth.uid &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.action is string && // Add enum check if needed
                         request.resource.data.details is map;
        // Audit logs should be immutable
        allow update: if false;
        allow delete: if false;
      }

      // EVENTS Subcollection
      match /events/{eventId} {
        allow read: if isUserAuthenticated() && isGuildMember(get(/databases/$(database)/documents/guilds/$(guildId)));
        allow create: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.organizerId == request.auth.uid &&
                         request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                         request.resource.data.date is string && // YYYY-MM-DD format
                         request.resource.data.time is string && // HH:MM format
                         request.resource.data.createdAt == request.time &&
                         (request.resource.data.description == null || request.resource.data.description is string) &&
                         (request.resource.data.endDate == null || request.resource.data.endDate is string) &&
                         (request.resource.data.endTime == null || request.resource.data.endTime is string) &&
                         (request.resource.data.location == null || request.resource.data.location is string) &&
                         (request.resource.data.dkpValue == null || request.resource.data.dkpValue is number) &&
                         (request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool) &&
                         (request.resource.data.pinCode == null || (request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6)) &&
                         (request.resource.data.attendeeIds == null || request.resource.data.attendeeIds is list) &&
                         (request.resource.data.attendeesWithPin == null || request.resource.data.attendeesWithPin is list) &&
                         (request.resource.data.category == null || request.resource.data.category is string) &&
                         (request.resource.data.subCategory == null || request.resource.data.subCategory is string);

        allow update: if isUserAuthenticated() {
                        let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
                        // Organizer or Leader/Vice-Leader can update
                        if (isGuildOfficerOrHigher(guildDoc) || resource.data.organizerId == request.auth.uid) {
                             return request.resource.data.guildId == resource.data.guildId &&
                                    request.resource.data.organizerId == resource.data.organizerId &&
                                    request.resource.data.createdAt == resource.data.createdAt &&
                                    request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                                    request.resource.data.date is string &&
                                    request.resource.data.time is string &&
                                    (request.resource.data.description == null || request.resource.data.description is string) &&
                                    (request.resource.data.endDate == null || request.resource.data.endDate is string) &&
                                    (request.resource.data.endTime == null || request.resource.data.endTime is string) &&
                                    (request.resource.data.location == null || request.resource.data.location is string) &&
                                    (request.resource.data.dkpValue == null || request.resource.data.dkpValue is number) &&
                                    (request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool) &&
                                    (request.resource.data.pinCode == null || (request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6)) &&
                                    (request.resource.data.attendeeIds == null || request.resource.data.attendeeIds is list) &&
                                    (request.resource.data.attendeesWithPin == null || request.resource.data.attendeesWithPin is list) &&
                                    (request.resource.data.category == null || request.resource.data.category is string) &&
                                    (request.resource.data.subCategory == null || request.resource.data.subCategory is string);
                        }
                        // Member submitting PIN
                        if (isGuildMember(guildDoc) &&
                            request.resource.data.attendeesWithPin == resource.data.attendeesWithPin.concat([request.auth.uid]) &&
                            // Ensure only attendeesWithPin is changed by the member
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeesWithPin'])) {
                          return true;
                        }
                        return false;
                      }
        allow delete: if isUserAuthenticated() && (isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) || resource.data.organizerId == request.auth.uid);
      }

      // GROUPS Subcollection
      match /groups/{groupId} {
        allow read: if isUserAuthenticated() && isGuildMember(get(/databases/$(database)/documents/guilds/$(guildId)));
        allow create: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.createdBy == request.auth.uid &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string && // Could add more specific color checks
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         // Validate each member in the list
                         (request.resource.data.members.size() == 0 || request.resource.data.members[0].memberId is string) &&
                         (request.resource.data.members.size() == 0 || request.resource.data.members[0].displayName is string) &&
                         (request.resource.data.members.size() == 0 || (request.resource.data.members[0].photoURL == null || request.resource.data.members[0].photoURL is string)) &&
                         (request.resource.data.members.size() == 0 || (request.resource.data.members[0].note == null || (request.resource.data.members[0].note is string && request.resource.data.members[0].note.size() <= 100)));


        allow update: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) &&
                         request.resource.data.guildId == resource.data.guildId &&
                         request.resource.data.createdBy == resource.data.createdBy && // Creator cannot change
                         request.resource.data.createdAt == resource.data.createdAt && // Creation time cannot change
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string &&
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         // Validate each member in the list (simplified for update)
                         (request.resource.data.members.size() == 0 || request.resource.data.members[0].memberId is string);

        allow delete: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId)));
      }

      // NOTIFICATIONS Subcollection
      match /notifications/{notificationId} {
        allow read: if isUserAuthenticated() && isGuildMember(get(/databases/$(database)/documents/guilds/$(guildId)));
        allow create: if isUserAuthenticated() && isGuildOfficerOrHigher(get(/databases/$(database)/documents/guilds/$(guildId))) && // System/Officer created
                         request.resource.data.guildId == guildId &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.message is string &&
                         request.resource.data.type is string && // Add enum check if needed
                         request.resource.data.link is string &&
                         (request.resource.data.isRead == null || request.resource.data.isRead == false); // New notifications are unread
        // Notifications are generally immutable by users once created, except maybe for 'isRead' status.
        // For simplicity, making them immutable for now by users. 'isRead' can be handled by server-side logic or more complex rules.
        allow update: if false;
        allow delete: if isUserAuthenticated() && isGuildLeader(get(/databases/$(database)/documents/guilds/$(guildId))); // Only leader can delete for now
      }
    }
  }
}

    
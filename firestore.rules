
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getGuildData(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId)).data;
    }

    function isGuildOwner(guildId, userId) {
      return isAuthenticated() && getGuildData(guildId).ownerId == userId;
    }

    function isGuildLeaderOrViceLeader(guildId, userId) {
      let guildData = getGuildData(guildId);
      return isAuthenticated() &&
             guildData.roles != null &&
             guildData.roles[userId] != null &&
             (guildData.roles[userId].generalRole == 'Líder' || guildData.roles[userId].generalRole == 'Vice-Líder');
    }

    function isGuildMember(guildId, userId) {
      let guildData = getGuildData(guildId);
      return isAuthenticated() &&
             (isGuildOwner(guildId, userId) || (guildData.memberIds != null && userId in guildData.memberIds));
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUser(userId) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.displayName == request.auth.token.name &&
                       request.resource.data.photoURL == request.auth.token.picture &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'guilds', 'lastNotificationsCheckedTimestamp']) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.guilds is list &&
                       request.resource.data.guilds.size() == 0 &&
                       request.resource.data.lastNotificationsCheckedTimestamp is map;

      allow update: if isUser(userId) &&
                       request.resource.data.uid == resource.data.uid && // Cannot change UID
                       request.resource.data.email == resource.data.email && // Cannot change email via client
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change creation date
                       // Allow displayName, photoURL, guilds, lastNotificationsCheckedTimestamp to be updated
                       (request.resource.data.displayName == request.auth.token.name || request.resource.data.displayName is string) &&
                       (request.resource.data.photoURL == request.auth.token.picture || request.resource.data.photoURL is string || request.resource.data.photoURL == null) &&
                       (request.resource.data.guilds is list) &&
                       (request.resource.data.lastNotificationsCheckedTimestamp is map) &&
                       request.resource.data.keys().hasOnly(['uid', 'email', 'displayName', 'photoURL', 'createdAt', 'guilds', 'lastNotificationsCheckedTimestamp', 'gearScore']); // Allow gearScore if present
    }

    // Guilds
    match /guilds/{guildId} {
      allow read: if isAuthenticated(); // Any authenticated user can see basic guild list info

      allow create: if isAuthenticated() &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                       (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
                       request.resource.data.game is string && request.resource.data.game.size() >= 1 && request.resource.data.game.size() <= 50 &&
                       request.resource.data.ownerDisplayName == request.auth.token.name &&
                       request.resource.data.memberIds is list && request.resource.data.memberIds.size() == 1 && request.resource.data.memberIds[0] == request.auth.uid &&
                       request.resource.data.memberCount == 1 &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.isOpen == (request.resource.data.password == null) &&
                       request.resource.data.bannerUrl is string &&
                       request.resource.data.logoUrl is string &&
                       request.resource.data.roles is map && request.resource.data.roles[request.auth.uid].generalRole == 'Líder' &&
                       request.resource.data.roles[request.auth.uid].dkpBalance == 0 &&
                       (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                       (request.resource.data.socialLinks == null || (
                         request.resource.data.socialLinks is map &&
                         (request.resource.data.socialLinks.facebook == null || request.resource.data.socialLinks.facebook is string) &&
                         (request.resource.data.socialLinks.x == null || request.resource.data.socialLinks.x is string) &&
                         (request.resource.data.socialLinks.youtube == null || request.resource.data.socialLinks.youtube is string) &&
                         (request.resource.data.socialLinks.discord == null || request.resource.data.socialLinks.discord is string)
                       )) &&
                       request.resource.data.keys().hasOnly([
                         'name', 'description', 'game', 'ownerId', 'ownerDisplayName', 'memberIds', 'memberCount', 'createdAt',
                         'isOpen', 'bannerUrl', 'logoUrl', 'roles', 'password', 'socialLinks', 'tags' // Added tags as optional
                       ]);

      allow update: if isAuthenticated() && (
                      // Owner can update specific general settings
                      (isGuildOwner(guildId, request.auth.uid) &&
                        request.resource.data.ownerId == resource.data.ownerId &&
                        request.resource.data.ownerDisplayName == resource.data.ownerDisplayName &&
                        request.resource.data.memberCount == resource.data.memberCount && // Member count managed by specific actions
                        request.resource.data.createdAt == resource.data.createdAt &&
                        // Allow owner to change: name, description, password (and thus isOpen), banner, logo, socialLinks, game
                        request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                        (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
                        request.resource.data.game is string && request.resource.data.game.size() >= 1 && request.resource.data.game.size() <= 50 &&
                        (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50)) &&
                        request.resource.data.isOpen == (request.resource.data.password == null) &&
                        request.resource.data.bannerUrl is string &&
                        request.resource.data.logoUrl is string &&
                        (request.resource.data.socialLinks == null || (
                           request.resource.data.socialLinks is map &&
                           (request.resource.data.socialLinks.facebook == null || request.resource.data.socialLinks.facebook is string) &&
                           (request.resource.data.socialLinks.x == null || request.resource.data.socialLinks.x is string) &&
                           (request.resource.data.socialLinks.youtube == null || request.resource.data.socialLinks.youtube is string) &&
                           (request.resource.data.socialLinks.discord == null || request.resource.data.socialLinks.discord is string)
                         )) &&
                         // Only these fields can be directly updated by owner in this block
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'password', 'isOpen', 'bannerUrl', 'logoUrl', 'socialLinks', 'game', 'tags'])
                      ) ||
                      // Leader/Vice-Leader can update roles, memberIds, memberCount (specific actions)
                      (isGuildLeaderOrViceLeader(guildId, request.auth.uid) &&
                        (
                          (request.resource.data.roles is map && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles'])) || // Role changes
                          (request.resource.data.memberIds is list && request.resource.data.memberCount is number && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount'])) // Kicking/Adding members
                        ) &&
                        request.resource.data.ownerId == resource.data.ownerId && // Cannot change owner here
                        request.resource.data.createdAt == resource.data.createdAt // Cannot change creation date
                      ) ||
                      // A user adding themselves to memberIds (public join)
                      (
                        request.resource.data.memberIds is list && request.resource.data.memberIds.size() == resource.data.memberIds.size() + 1 &&
                        request.auth.uid in request.resource.data.memberIds && !(request.auth.uid in resource.data.memberIds) &&
                        request.resource.data.memberCount == resource.data.memberCount + 1 &&
                        request.resource.data.roles[request.auth.uid].generalRole == 'Membro' && // Ensure they are added as member
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'memberCount', 'roles'])
                      ) ||
                      // A user updating their own DKP balance via PIN redemption
                      (
                        isGuildMember(guildId, request.auth.uid) &&
                        request.resource.data.roles[request.auth.uid].dkpBalance is number &&
                        request.resource.data.roles[request.auth.uid].dkpBalance == resource.data.roles[request.auth.uid].dkpBalance + get(/databases/$(database)/documents/guilds/$(guildId)/events/$(request.resource.data.roles[request.auth.uid].lastRedeemedEventId)).data.dkpValue && // This is a conceptual check, harder to enforce increment directly in rules securely without a function
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roles']) // Only dkpBalance part of roles should change
                      )
                    );

      allow delete: if isGuildOwner(guildId, request.auth.uid);

      // Guild Subcollections

      // Audit Logs
      match /auditLogs/{logId} {
        allow read: if isGuildLeaderOrViceLeader(guildId, request.auth.uid);
        allow create: if (isGuildLeaderOrViceLeader(guildId, request.auth.uid) || isGuildMember(guildId, request.auth.uid)) && // Members can trigger some logs (e.g. join/leave)
                         request.resource.data.actorId == request.auth.uid &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.action is string &&
                         request.resource.data.details is map;
        allow update, delete: if false; // Logs are immutable
      }

      // Applications
      match /applications/{applicationId} {
        allow read: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) || isUser(request.resource.data.applicantId);
        allow create: if isAuthenticated() && // Any authenticated user can apply
                         request.resource.data.guildId == guildId &&
                         request.resource.data.applicantId == request.auth.uid &&
                         request.resource.data.applicantName is string &&
                         request.resource.data.gearScore is number &&
                         request.resource.data.gearScoreScreenshotUrl is string &&
                         request.resource.data.discordNick is string &&
                         request.resource.data.status == 'pending' &&
                         request.resource.data.submittedAt == request.time &&
                         (getGuildData(guildId).game != 'Throne and Liberty' || (
                            request.resource.data.tlRole is string &&
                            request.resource.data.tlPrimaryWeapon is string &&
                            request.resource.data.tlSecondaryWeapon is string
                         ));
        allow update: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) &&
                         request.resource.data.guildId == resource.data.guildId &&
                         request.resource.data.applicantId == resource.data.applicantId &&
                         request.resource.data.submittedAt == resource.data.submittedAt &&
                         (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected' || request.resource.data.status == 'auto_approved') &&
                         request.resource.data.reviewedBy == request.auth.uid &&
                         request.resource.data.reviewedAt == request.time;
        allow delete: if false; // Applications are not deleted, only status changed
      }

      // Events
      match /events/{eventId} {
        allow read: if isGuildMember(guildId, request.auth.uid);
        allow create: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.organizerId == request.auth.uid &&
                         request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                         request.resource.data.date is string && request.resource.data.time is string &&
                         request.resource.data.createdAt == request.time &&
                         (request.resource.data.description == null || request.resource.data.description is string) &&
                         (request.resource.data.endDate == null || request.resource.data.endDate is string) &&
                         (request.resource.data.endTime == null || request.resource.data.endTime is string) &&
                         (request.resource.data.location == null || request.resource.data.location is string) &&
                         (request.resource.data.dkpValue == null || request.resource.data.dkpValue is number) &&
                         (request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool) &&
                         (request.resource.data.pinCode == null || (request.resource.data.requiresPin == true && request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6)) &&
                         (request.resource.data.attendeesWithPin == null || request.resource.data.attendeesWithPin is list) &&
                         (request.resource.data.category == null || request.resource.data.category is string) &&
                         (request.resource.data.subCategory == null || request.resource.data.subCategory is string);

        allow update: if (isGuildLeaderOrViceLeader(guildId, request.auth.uid)) || // Leader/Vice can update fully
                         // Member redeeming PIN
                         (isGuildMember(guildId, request.auth.uid) &&
                           request.resource.data.attendeesWithPin is list &&
                           request.resource.data.attendeesWithPin.size() == resource.data.attendeesWithPin.size() + 1 &&
                           request.auth.uid in request.resource.data.attendeesWithPin &&
                           !(request.auth.uid in resource.data.attendeesWithPin) &&
                           // Ensure only attendeesWithPin is changed by member
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendeesWithPin'])
                         );

        allow delete: if isGuildLeaderOrViceLeader(guildId, request.auth.uid);
      }

      // Groups
      match /groups/{groupId} {
        allow read: if isGuildMember(guildId, request.auth.uid);
        allow create: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) &&
                         request.resource.data.guildId == guildId &&
                         request.resource.data.createdBy == request.auth.uid &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                         request.resource.data.icon is string && (request.resource.data.icon == 'shield' || request.resource.data.icon == 'sword' || request.resource.data.icon == 'heart') &&
                         request.resource.data.headerColor is string &&
                         request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6 &&
                         request.resource.data.members[0].memberId is string; // Basic check for member structure

        allow update: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) &&
                         request.resource.data.guildId == resource.data.guildId &&
                         request.resource.data.createdBy == resource.data.createdBy &&
                         request.resource.data.createdAt == resource.data.createdAt; // Don't allow changing creator/creation time
        allow delete: if isGuildLeaderOrViceLeader(guildId, request.auth.uid);
      }

      // Notifications
      match /notifications/{notificationId} {
        allow read: if isGuildMember(guildId, request.auth.uid); // Assuming all guild members can read notifications for their guild
        allow create: if isGuildLeaderOrViceLeader(guildId, request.auth.uid) && // Only leaders/vices can create notifications
                         request.resource.data.guildId == guildId &&
                         request.resource.data.message is string &&
                         request.resource.data.type is string &&
                         request.resource.data.link is string &&
                         request.resource.data.timestamp == request.time;
        allow update, delete: if false; // Notifications generally shouldn't be updated or deleted by clients
      }
    }
  }
}

    
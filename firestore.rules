
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function getGuildData(guildId) {
      return get(/databases/$(database)/documents/guilds/$(guildId)).data;
    }

    function getUserRoleInGuild(userId, guildId) {
      let guildData = getGuildData(guildId);
      return guildData.roles[userId].generalRole;
    }

    function isGuildOwner(userId, guildId) {
      return userId == getGuildData(guildId).ownerId;
    }

    function isGuildLeader(userId, guildId) {
      return getUserRoleInGuild(userId, guildId) == "Lider";
    }

    function isGuildViceLeader(userId, guildId) {
      let userRole = getUserRoleInGuild(userId, guildId);
      return userRole == "Lider" || userRole == "ViceLider";
    }

    function isGuildMember(userId, guildId) {
      let guildData = getGuildData(guildId);
      return userId in guildData.memberIds && userId in guildData.roles;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.auth.uid == userId
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.email
                    && request.resource.data.displayName is string && request.resource.data.displayName.size() > 0
                    && (request.resource.data.photoURL == null || request.resource.data.photoURL is string)
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.guilds is list && request.resource.data.guilds.size() == 0
                    && request.resource.data.lastNotificationsCheckedTimestamp is map && request.resource.data.lastNotificationsCheckedTimestamp.size() == 0;
      allow update: if isUserAuthenticated() && request.auth.uid == userId
                    && (request.resource.data.displayName == resource.data.displayName || request.resource.data.displayName is string)
                    && (request.resource.data.photoURL == resource.data.photoURL || request.resource.data.photoURL is string || request.resource.data.photoURL == null)
                    && (request.resource.data.guilds == resource.data.guilds || request.resource.data.guilds is list)
                    && request.resource.data.email == resource.data.email // Email cannot change
                    && request.resource.data.uid == resource.data.uid // UID cannot change
                    && request.resource.data.createdAt == resource.data.createdAt // CreatedAt cannot change
                    && (request.resource.data.lastNotificationsCheckedTimestamp == resource.data.lastNotificationsCheckedTimestamp || request.resource.data.lastNotificationsCheckedTimestamp is map); // Allow updating notification timestamps
    }

    // Guilds collection
    match /guilds/{guildId} {
      allow read: if true; // Publicly readable for guild listings, detailed view might be protected by app logic

      allow create: if isUserAuthenticated()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50
                    && (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 500))
                    && request.resource.data.game is string && request.resource.data.game.size() >= 1 && request.resource.data.game.size() <= 50
                    && (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50))
                    && request.resource.data.isOpen == (request.resource.data.password == null)
                    && request.resource.data.memberCount == 1
                    && request.resource.data.memberIds is list && request.resource.data.memberIds.size() == 1 && request.resource.data.memberIds[0] == request.auth.uid
                    && request.resource.data.ownerDisplayName == request.auth.token.name
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.bannerUrl is string && request.resource.data.bannerUrl.matches('https://placehold.co/.*')
                    && request.resource.data.logoUrl is string && request.resource.data.logoUrl.matches('https://placehold.co/.*')
                    && request.resource.data.roles is map && request.resource.data.roles.size() == 1
                    && request.auth.uid in request.resource.data.roles
                    && request.resource.data.roles[request.auth.uid].generalRole == "Lider"
                    && request.resource.data.roles[request.auth.uid].dkpBalance == 0
                    && (request.resource.data.socialLinks == null || (
                        request.resource.data.socialLinks is map
                        && (request.resource.data.socialLinks.size() == 0 || (
                            ('facebook' in request.resource.data.socialLinks ? request.resource.data.socialLinks.facebook is string && request.resource.data.socialLinks.facebook.matches('https://.*') : true) &&
                            ('x' in request.resource.data.socialLinks ? request.resource.data.socialLinks.x is string && request.resource.data.socialLinks.x.matches('https://.*') : true) &&
                            ('youtube' in request.resource.data.socialLinks ? request.resource.data.socialLinks.youtube is string && request.resource.data.socialLinks.youtube.matches('https://.*') : true) &&
                            ('discord' in request.resource.data.socialLinks ? request.resource.data.socialLinks.discord is string && request.resource.data.socialLinks.discord.matches('https://.*') : true)
                        ))
                    ));

      allow update: if isUserAuthenticated()
                    // Owner can update settings (name, password, visibility, banner, logo)
                    && (
                      ( isGuildOwner(request.auth.uid, guildId)
                        && (
                          (request.resource.data.name != resource.data.name && request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50) ||
                          (request.resource.data.password != resource.data.password && (request.resource.data.password == null || (request.resource.data.password is string && request.resource.data.password.size() <= 50))) ||
                          (request.resource.data.isOpen != resource.data.isOpen && request.resource.data.isOpen == (request.resource.data.password == null)) ||
                          (request.resource.data.bannerUrl != resource.data.bannerUrl && request.resource.data.bannerUrl is string && (request.resource.data.bannerUrl.matches('https://i.imgur.com/.*') || request.resource.data.bannerUrl.matches('https://placehold.co/.*') || request.resource.data.bannerUrl.matches('https://cdn.questlog.gg/.*'))) ||
                          (request.resource.data.logoUrl != resource.data.logoUrl && request.resource.data.logoUrl is string && (request.resource.data.logoUrl.matches('https://i.imgur.com/.*') || request.resource.data.logoUrl.matches('https://placehold.co/.*') || request.resource.data.logoUrl.matches('https://cdn.questlog.gg/.*')))
                          // Only settings fields are changed
                          && request.resource.data.description == resource.data.description
                          && request.resource.data.game == resource.data.game
                          && request.resource.data.ownerId == resource.data.ownerId
                          && request.resource.data.ownerDisplayName == resource.data.ownerDisplayName
                          && request.resource.data.memberIds == resource.data.memberIds
                          && request.resource.data.memberCount == resource.data.memberCount
                          && request.resource.data.roles == resource.data.roles
                          && request.resource.data.socialLinks == resource.data.socialLinks
                        )
                      ) ||
                      // Leader or Vice-Leader can manage roles, notes, status, DKP balance
                      ( isGuildViceLeader(request.auth.uid, guildId)
                        && request.resource.data.roles != resource.data.roles
                        && request.resource.data.roles.affectedKeys().hasOnly(request.resource.data.roles.keys()) // no new members via role update
                        && request.resource.data.roles.keys().hasOnly(resource.data.memberIds) // only existing members
                        && request.resource.data.roles.diff(resource.data.roles).affectedKeys().size() > 0 // ensure something changed
                        && request.resource.data.roles.diff(resource.data.roles).affectedKeys().forall(userId =>
                            // Validate the structure of the updated role object
                            request.resource.data.roles[userId] is map &&
                            request.resource.data.roles[userId].generalRole is string && request.resource.data.roles[userId].generalRole in ["Lider", "ViceLider", "Conselheiro", "Oficial", "Membro"] &&
                            (request.resource.data.roles[userId].dkpBalance == null || request.resource.data.roles[userId].dkpBalance is number && request.resource.data.roles[userId].dkpBalance >= 0) &&
                            (request.resource.data.roles[userId].notes == null || request.resource.data.roles[userId].notes is string && request.resource.data.roles[userId].notes.size() <= 500) &&
                            (request.resource.data.roles[userId].status == null || request.resource.data.roles[userId].status is string && request.resource.data.roles[userId].status in ["Ativo", "Inativo", "Licença"]) &&
                            (request.resource.data.roles[userId].tlRole == null || request.resource.data.roles[userId].tlRole is string && request.resource.data.roles[userId].tlRole in ["Tank", "Healer", "DPS"]) &&
                            (request.resource.data.roles[userId].tlPrimaryWeapon == null || request.resource.data.roles[userId].tlPrimaryWeapon is string) && // Add specific weapon enum check if needed
                            (request.resource.data.roles[userId].tlSecondaryWeapon == null || request.resource.data.roles[userId].tlSecondaryWeapon is string) && // Add specific weapon enum check if needed
                            // Check permissions for role change
                            ( (request.resource.data.roles[userId].generalRole != resource.data.roles[userId].generalRole)
                                ? ( (isGuildLeader(request.auth.uid, guildId) && resource.data.roles[userId].generalRole != "Lider" && request.resource.data.roles[userId].generalRole != "Lider" && userId != request.auth.uid) ||
                                    (getUserRoleInGuild(request.auth.uid, guildId) == "ViceLider" && resource.data.roles[userId].generalRole != "Lider" && resource.data.roles[userId].generalRole != "ViceLider" && request.resource.data.roles[userId].generalRole != "Lider" && request.resource.data.roles[userId].generalRole != "ViceLider" )
                                  )
                                : true
                            )
                            // Other fields remain unchanged
                            && request.resource.data.name == resource.data.name
                            && request.resource.data.description == resource.data.description
                            && request.resource.data.game == resource.data.game
                            && request.resource.data.ownerId == resource.data.ownerId
                            && request.resource.data.ownerDisplayName == resource.data.ownerDisplayName
                            && request.resource.data.memberIds == resource.data.memberIds
                            && request.resource.data.memberCount == resource.data.memberCount
                            && request.resource.data.socialLinks == resource.data.socialLinks
                            && request.resource.data.bannerUrl == resource.data.bannerUrl
                            && request.resource.data.logoUrl == resource.data.logoUrl
                            && request.resource.data.password == resource.data.password
                            && request.resource.data.isOpen == resource.data.isOpen
                        )
                      ) ||
                      // User joining a public guild (auto-approved application path or direct join)
                      ( resource.data.isOpen == true
                        && request.auth.uid !in resource.data.memberIds // user is not already a member
                        && request.resource.data.memberIds == resource.data.memberIds.concat([request.auth.uid])
                        && request.resource.data.memberCount == resource.data.memberCount + 1
                        && request.resource.data.roles is map && request.auth.uid in request.resource.data.roles
                        && request.resource.data.roles[request.auth.uid].generalRole == "Membro" // New member gets "Membro" role
                        && request.resource.data.roles[request.auth.uid].dkpBalance == 0
                        && (request.resource.data.roles[request.auth.uid].notes is string && request.resource.data.roles[request.auth.uid].notes.size() <= 500)
                        && (request.resource.data.roles[request.auth.uid].status == null || request.resource.data.roles[request.auth.uid].status is string && request.resource.data.roles[request.auth.uid].status in ["Ativo", "Inativo", "Licença"])
                        && (getGuildData(guildId).game == "Throne and Liberty"
                            ? ( request.resource.data.roles[request.auth.uid].tlRole is string && request.resource.data.roles[request.auth.uid].tlRole in ["Tank", "Healer", "DPS"] &&
                                request.resource.data.roles[request.auth.uid].tlPrimaryWeapon is string &&
                                request.resource.data.roles[request.auth.uid].tlSecondaryWeapon is string
                              )
                            : ( request.resource.data.roles[request.auth.uid].tlRole == null &&
                                request.resource.data.roles[request.auth.uid].tlPrimaryWeapon == null &&
                                request.resource.data.roles[request.auth.uid].tlSecondaryWeapon == null
                              )
                        )
                        // Ensure other critical fields are not changed by the user joining
                        && request.resource.data.name == resource.data.name
                        && request.resource.data.ownerId == resource.data.ownerId
                        && request.resource.data.isOpen == resource.data.isOpen
                        && request.resource.data.password == resource.data.password
                        && request.resource.data.bannerUrl == resource.data.bannerUrl
                        && request.resource.data.logoUrl == resource.data.logoUrl
                      ) ||
                      // Leader or Vice-Leader kicking a member
                      ( isGuildViceLeader(request.auth.uid, guildId) // Leader or ViceLeader
                        && request.resource.data.memberIds.size() == resource.data.memberIds.size() - 1
                        && request.resource.data.memberCount == resource.data.memberCount - 1
                        && resource.data.memberIds.removeAll(request.resource.data.memberIds).size() == 1 // Only one member removed
                        && let removedUserId = resource.data.memberIds.removeAll(request.resource.data.memberIds)[0];
                        removedUserId != request.auth.uid && // Cannot kick self
                        removedUserId != resource.data.ownerId && // Cannot kick owner
                        ( (isGuildLeader(request.auth.uid, guildId)) || // Leader can kick anyone but self/owner
                          (getUserRoleInGuild(request.auth.uid, guildId) == "ViceLider" && resource.data.roles[removedUserId].generalRole != "Lider" && resource.data.roles[removedUserId].generalRole != "ViceLider") // Vice can kick lower ranks
                        )
                        && !(removedUserId in request.resource.data.roles) // Ensure role entry is removed
                        // Other fields remain unchanged
                        && request.resource.data.name == resource.data.name
                        && request.resource.data.description == resource.data.description
                        && request.resource.data.game == resource.data.game
                        && request.resource.data.ownerId == resource.data.ownerId
                        && request.resource.data.ownerDisplayName == resource.data.ownerDisplayName
                        && request.resource.data.socialLinks == resource.data.socialLinks
                        && request.resource.data.bannerUrl == resource.data.bannerUrl
                        && request.resource.data.logoUrl == resource.data.logoUrl
                        && request.resource.data.password == resource.data.password
                        && request.resource.data.isOpen == resource.data.isOpen
                      ) ||
                      // Member leaving
                      ( isGuildMember(request.auth.uid, guildId) && request.auth.uid != resource.data.ownerId // Owner cannot leave this way
                        && request.resource.data.memberIds == resource.data.memberIds.removeAll([request.auth.uid])
                        && request.resource.data.memberCount == resource.data.memberCount - 1
                        && !(request.auth.uid in request.resource.data.roles) // Role entry removed for leaving member
                        // Other fields remain unchanged
                        && request.resource.data.name == resource.data.name
                        && request.resource.data.description == resource.data.description
                        && request.resource.data.game == resource.data.game
                        && request.resource.data.ownerId == resource.data.ownerId
                        && request.resource.data.ownerDisplayName == resource.data.ownerDisplayName
                        && request.resource.data.socialLinks == resource.data.socialLinks
                        && request.resource.data.bannerUrl == resource.data.bannerUrl
                        && request.resource.data.logoUrl == resource.data.logoUrl
                        && request.resource.data.password == resource.data.password
                        && request.resource.data.isOpen == resource.data.isOpen
                      )
                    )
                    // Ensure createdAt is not changed
                    && request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isUserAuthenticated() && isGuildOwner(request.auth.uid, guildId);

      // Subcollections
      match /applications/{applicationId} {
        allow read: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId); // Leader/Vice can read applications
        allow create: if isUserAuthenticated()
                      && request.resource.data.applicantId == request.auth.uid
                      && request.resource.data.guildId == guildId
                      && request.resource.data.applicantName is string && request.resource.data.applicantName.size() > 0 && request.resource.data.applicantName.size() <= 50
                      && request.resource.data.applicantDisplayName == request.auth.token.name
                      && (request.resource.data.applicantPhotoURL == null || request.resource.data.applicantPhotoURL is string)
                      && request.resource.data.gearScore is number && request.resource.data.gearScore >= 0 && request.resource.data.gearScore <= 10000
                      && request.resource.data.gearScoreScreenshotUrl is string && request.resource.data.gearScoreScreenshotUrl.matches('https://.*')
                      && request.resource.data.discordNick is string && request.resource.data.discordNick.size() > 0 && request.resource.data.discordNick.size() <= 50
                      && request.resource.data.submittedAt == request.time
                      && (getGuildData(guildId).game == "Throne and Liberty"
                          ? ( request.resource.data.tlRole is string && request.resource.data.tlRole in ["Tank", "Healer", "DPS"] &&
                              request.resource.data.tlPrimaryWeapon is string && 
                              request.resource.data.tlSecondaryWeapon is string
                            )
                          : ( request.resource.data.tlRole == null &&
                              request.resource.data.tlPrimaryWeapon == null &&
                              request.resource.data.tlSecondaryWeapon == null
                            )
                      )
                      && ( (getGuildData(guildId).isOpen == true && request.resource.data.status == "auto_approved" && request.resource.data.reviewedBy == "system" && request.resource.data.reviewedAt == request.time) ||
                           (getGuildData(guildId).isOpen == false && request.resource.data.status == "pending" && !('reviewedBy' in request.resource.data) && !('reviewedAt' in request.resource.data) )
                         )
                      && request.auth.uid !in getGuildData(guildId).memberIds; // Cannot apply if already a member

        allow update: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId) // Leader/Vice can update status
                      && request.resource.data.status is string && request.resource.data.status in ["approved", "rejected"]
                      && request.resource.data.reviewedBy == request.auth.uid
                      && request.resource.data.reviewedAt == request.time
                      // Ensure only status, reviewedBy, reviewedAt are changed
                      && request.resource.data.applicantId == resource.data.applicantId
                      && request.resource.data.guildId == resource.data.guildId
                      && request.resource.data.applicantName == resource.data.applicantName
                      && request.resource.data.applicantDisplayName == resource.data.applicantDisplayName
                      && request.resource.data.applicantPhotoURL == resource.data.applicantPhotoURL
                      && request.resource.data.gearScore == resource.data.gearScore
                      && request.resource.data.gearScoreScreenshotUrl == resource.data.gearScoreScreenshotUrl
                      && request.resource.data.discordNick == resource.data.discordNick
                      && request.resource.data.tlRole == resource.data.tlRole
                      && request.resource.data.tlPrimaryWeapon == resource.data.tlPrimaryWeapon
                      && request.resource.data.tlSecondaryWeapon == resource.data.tlSecondaryWeapon
                      && request.resource.data.submittedAt == resource.data.submittedAt;
        allow delete: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId); // Leader/Vice can delete
      }

      match /auditLogs/{logId} {
        allow read: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId);
        allow list: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId);
        allow create: if isUserAuthenticated() // System/Server-Side writes audit logs
                      && request.resource.data.actorId == request.auth.uid
                      && request.resource.data.timestamp == request.time
                      && request.resource.data.action is string // Further validation based on AuditActionType enum values
                      && request.resource.data.details is map;
        allow update, delete: if false; // Logs are immutable
      }

      match /events/{eventId} {
        allow read: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow list: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow create: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId) // Only Leader/Vice can create
                      && request.resource.data.guildId == guildId
                      && request.resource.data.organizerId == request.auth.uid
                      && request.resource.data.title is string && request.resource.data.title.size() > 0 && request.resource.data.title.size() <= 100
                      && request.resource.data.date is string // YYYY-MM-DD format
                      && request.resource.data.time is string // HH:MM format
                      && (request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 1000))
                      && (request.resource.data.endDate == null || request.resource.data.endDate is string)
                      && (request.resource.data.endTime == null || request.resource.data.endTime is string)
                      && (request.resource.data.location == null || (request.resource.data.location is string && request.resource.data.location.size() <= 100))
                      && (request.resource.data.attendeeIds == null || request.resource.data.attendeeIds is list)
                      && (request.resource.data.dkpValue == null || (request.resource.data.dkpValue is number && request.resource.data.dkpValue >= 0))
                      && (request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool)
                      && (request.resource.data.pinCode == null || (request.resource.data.requiresPin == true && request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6))
                      && (request.resource.data.attendeesWithPin == null || request.resource.data.attendeesWithPin is list)
                      && (request.resource.data.category == null || request.resource.data.category is string)
                      && (request.resource.data.subCategory == null || request.resource.data.subCategory is string)
                      && request.resource.data.createdAt == request.time;

        allow update: if isUserAuthenticated()
                      && (isGuildViceLeader(request.auth.uid, guildId)) // Leader/Vice can update basic event details
                      && (
                         // Check if only attendeesWithPin is being updated by any member for their own UID
                         ( request.resource.data.keys().hasOnly(['attendeesWithPin']) // only this field is changing
                           && request.resource.data.attendeesWithPin == resource.data.attendeesWithPin.concat([request.auth.uid])
                           && isGuildMember(request.auth.uid, guildId) // must be a member
                           && request.auth.uid !in resource.data.attendeesWithPin // not already in the list
                           && resource.data.requiresPin == true && resource.data.pinCode is string // event must require PIN
                           // ensure other fields are not changed
                           && request.resource.data.title == resource.data.title
                           && request.resource.data.date == resource.data.date
                           && request.resource.data.time == resource.data.time
                           && request.resource.data.dkpValue == resource.data.dkpValue // DKP itself not changed here
                         ) ||
                         // Leader/Vice can update other fields
                         ( isGuildViceLeader(request.auth.uid, guildId)
                           && request.resource.data.guildId == guildId // guildId cannot change
                           && request.resource.data.organizerId == resource.data.organizerId // organizer cannot change this way
                           && (request.resource.data.title == resource.data.title || (request.resource.data.title is string && request.resource.data.title.size() > 0 && request.resource.data.title.size() <= 100))
                           && (request.resource.data.date == resource.data.date || request.resource.data.date is string)
                           && (request.resource.data.time == resource.data.time || request.resource.data.time is string)
                           && (request.resource.data.description == resource.data.description || request.resource.data.description == null || (request.resource.data.description is string && request.resource.data.description.size() <= 1000))
                           && (request.resource.data.endDate == resource.data.endDate || request.resource.data.endDate == null || request.resource.data.endDate is string)
                           && (request.resource.data.endTime == resource.data.endTime || request.resource.data.endTime == null || request.resource.data.endTime is string)
                           && (request.resource.data.dkpValue == resource.data.dkpValue || request.resource.data.dkpValue == null || (request.resource.data.dkpValue is number && request.resource.data.dkpValue >=0))
                           && (request.resource.data.requiresPin == resource.data.requiresPin || request.resource.data.requiresPin == null || request.resource.data.requiresPin is bool)
                           && (request.resource.data.pinCode == resource.data.pinCode || request.resource.data.pinCode == null || (request.resource.data.requiresPin == true && request.resource.data.pinCode is string && request.resource.data.pinCode.size() == 6))
                           // Other fields are not changed by this general update
                           && request.resource.data.attendeesWithPin == resource.data.attendeesWithPin
                         )
                      )
                      && request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot change

        allow delete: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId); // Leader/Vice can delete
      }

      match /groups/{groupId} {
        allow read: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow list: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow create: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId)
                      && request.resource.data.guildId == guildId
                      && request.resource.data.createdBy == request.auth.uid
                      && request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50
                      && request.resource.data.icon is string && request.resource.data.icon in ['shield', 'sword', 'heart']
                      && request.resource.data.headerColor is string // Basic check, specific color validation can be complex
                      && request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6
                      && request.resource.data.members.forall(member =>
                          member is map &&
                          member.memberId is string && isGuildMember(member.memberId, guildId) &&
                          member.displayName is string &&
                          (member.photoURL == null || member.photoURL is string) &&
                          (member.note == null || (member.note is string && member.note.size() <= 100))
                      )
                      && request.resource.data.createdAt == request.time;
        allow update: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId)
                      && request.resource.data.guildId == guildId
                      && request.resource.data.createdBy == resource.data.createdBy // creator cannot change
                      && request.resource.data.createdAt == resource.data.createdAt // createdAt cannot change
                      && (request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50)
                      && (request.resource.data.icon is string && request.resource.data.icon in ['shield', 'sword', 'heart'])
                      && (request.resource.data.headerColor is string)
                      && (request.resource.data.members is list && request.resource.data.members.size() >= 1 && request.resource.data.members.size() <= 6)
                      && request.resource.data.members.forall(member =>
                          member is map &&
                          member.memberId is string && isGuildMember(member.memberId, guildId) &&
                          member.displayName is string &&
                          (member.photoURL == null || member.photoURL is string) &&
                          (member.note == null || (member.note is string && member.note.size() <= 100))
                      );
        allow delete: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId);
      }
      
      match /notifications/{notificationId} {
        allow read: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow list: if isUserAuthenticated() && isGuildMember(request.auth.uid, guildId);
        allow create: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId) // Typically system or leader/vice creates
                      && request.resource.data.guildId == guildId
                      && request.resource.data.message is string && request.resource.data.message.size() > 0
                      && request.resource.data.type is string // Add enum check if needed
                      && request.resource.data.link is string
                      && request.resource.data.timestamp == request.time
                      && (request.resource.data.createdByUserId == request.auth.uid || request.resource.data.createdByUserId == "system")
                      && (request.resource.data.createdByUserDisplayname == request.auth.token.name || request.resource.data.createdByUserDisplayname == "Sistema");

        allow update: if false; // Notifications are generally immutable or handled by specific logic not covered here.
        allow delete: if isUserAuthenticated() && isGuildViceLeader(request.auth.uid, guildId);
      }
    }
  }
}

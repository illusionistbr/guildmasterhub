
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Guilds:
    // - Owners can do anything to their guild.
    // - Members can read guilds they belong to.
    // - Authenticated users can create guilds.
    // - Public guilds (isOpen=true or no password) can be read by anyone.
    match /guilds/{guildId} {
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }
      function isMember() {
        return request.auth.uid in resource.data.memberIds;
      }
      function isPublic() {
        return resource.data.isOpen == true || !('password' in resource.data);
      }

      allow read: if isOwner() || isMember() || isPublic();
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow update: if isOwner() && !(request.resource.data.ownerId != resource.data.ownerId); // Prevent owner change
      allow delete: if isOwner();

      // Audit Logs:
      // - Guild Leader or ViceLeader can read logs.
      // - Guild Leader or ViceLeader (or specific trusted roles) can create logs.
      match /auditLogs/{logId} {
        function isGuildAdminForLog() {
          let guildDoc = get(/databases/$(database)/documents/guilds/$(guildId));
          // Ensure guildDoc and guildDoc.data exist, and guildDoc.data.roles exists
          return request.auth.uid == guildDoc.data.ownerId ||
                 (guildDoc.data.roles != null && guildDoc.data.roles[request.auth.uid] == "Líder") ||
                 (guildDoc.data.roles != null && guildDoc.data.roles[request.auth.uid] == "Vice-Líder");
        }
        allow read, create: if isGuildAdminForLog();
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/guilds/$(guildId)).data.ownerId; // Only overall owner can delete for now during guild deletion
      }
    }

    // Users:
    // - Authenticated users can read any user profile.
    // - Users can create, update, or delete their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }
  }
}
